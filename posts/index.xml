<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Posts on blog.AlmostEducated</title><link>http://blog.almost.education/posts/</link><description>Recent content in Posts on blog.AlmostEducated</description><generator>Hugo -- gohugo.io</generator><language>en-gb</language><lastBuildDate>Tue, 14 Dec 2021 18:28:42 +0000</lastBuildDate><atom:link href="http://blog.almost.education/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Clojure CLI apps using GraalVM</title><link>http://blog.almost.education/posts/clojure-cli-graal/</link><pubDate>Tue, 14 Dec 2021 18:28:42 +0000</pubDate><guid>http://blog.almost.education/posts/clojure-cli-graal/</guid><description>Clojure, like other JVM languages, excels in long-running tasks1. But I was always jealous of the languages that I&amp;#39;d used for scripting and command line tools which can&amp;#39;t wait a second for a JVM to start for each invocation. Despite its slow startup time, the JVM shines at peak throughput. Some times we want one, sometimes the other. For tasks that have a very short lifetime (~1s), we need Ahead of Time compilation.</description></item><item><title>Clojure's rarer threading macros: some-> and cond-></title><link>http://blog.almost.education/posts/clojure-threading-macros/</link><pubDate>Thu, 09 Dec 2021 19:43:18 +0000</pubDate><guid>http://blog.almost.education/posts/clojure-threading-macros/</guid><description>I use Clojure&amp;#39;s threading macros perhaps more than I should, but I do so because they mimic the way I think about the code I write. A lisp programme is a tree and yet most of the programmes that we write are, or should be, lines of functions acting on a datastructure1 2.
The value of threading macros 1 2 (* 3 (+ 2 (- 10 (+ 10 (/ 2 2))))) ^ To grok this code I have to start from the bottommost leaf, in this case (/ 2 2), yet it is at the line&amp;#39;s far right contrary to where it is natural for me and most of the world3 to start reading.</description></item><item><title>An 8-year-old Clojure bug, resorting to Java</title><link>http://blog.almost.education/posts/clojure-java-bug/</link><pubDate>Wed, 08 Dec 2021 15:26:12 +0000</pubDate><guid>http://blog.almost.education/posts/clojure-java-bug/</guid><description>Dodge a Clojure bug by using Java and tools.build</description></item><item><title>æ/alias+ns</title><link>http://blog.almost.education/posts/alias-ns/</link><pubDate>Wed, 24 Nov 2021 13:30:06 +0000</pubDate><guid>http://blog.almost.education/posts/alias-ns/</guid><description>Macros that makes namespace aliases easy.
https://github.com/EducatedAlmost/alias-ns.git
Qualified keywords have ballooned in popularity since the release of spec with Clojure 1.9. And thankfully so! A creed amongst Clojurians is that maps should be open to modification, meaning that I should be able to add data to a map without worrying that it will break its consumer, and that when processing maps we shouldn&amp;#39;t remove data using something like select-keys without good reason.</description></item><item><title>UK newspaper subscriptions</title><link>http://blog.almost.education/posts/uk-news-subs/</link><pubDate>Fri, 19 Nov 2021 19:47:15 +0000</pubDate><guid>http://blog.almost.education/posts/uk-news-subs/</guid><description>How much does a subscription cost?</description></item><item><title>æ/Rashomon</title><link>http://blog.almost.education/posts/rashomon/</link><pubDate>Fri, 19 Nov 2021 00:00:00 +0000</pubDate><guid>http://blog.almost.education/posts/rashomon/</guid><description>See things from another perspective; Clojure functions that build datastructures from events.</description></item><item><title>Correlation and causation IDs</title><link>http://blog.almost.education/posts/corr-caus-ids/</link><pubDate>Thu, 18 Nov 2021 00:00:00 +0000</pubDate><guid>http://blog.almost.education/posts/corr-caus-ids/</guid><description>This is a very useful pattern that I see rarely used. When working with systems that pass messages, it can be difficult to later reconstruct a conversation or the sequence of events. It is second nature to us to assign entity IDs1 to messages, but two other IDs will help us to understand the structure of conversations.
One is a correlation ID. This is used to tie the conversation together.</description></item><item><title>Event Sourcing</title><link>http://blog.almost.education/posts/event-sourcing/</link><pubDate>Wed, 17 Nov 2021 00:00:00 +0000</pubDate><guid>http://blog.almost.education/posts/event-sourcing/</guid><description>This article is in the process of being written.
Introduction State isn&amp;#39;t stored. We rebuild it every time we need to query or do something to it. It has its drawbacks, but it does allow us to do things that would be impossible otherwise. We can view out system&amp;#39;s history with new perspectives, or add in missed past events. Our view of the past is necessarily wrong for any complex system and yet we design systems that lack any way to account for that.</description></item><item><title>æ/Demesne</title><link>http://blog.almost.education/posts/demesne/</link><pubDate>Wed, 17 Nov 2021 00:00:00 +0000</pubDate><guid>http://blog.almost.education/posts/demesne/</guid><description>You don&amp;#39;t understand a pattern until you can implement it — domain-driven design, CQRS, event sourcing.</description></item><item><title>æ/read-time.el</title><link>http://blog.almost.education/posts/read-time-el/</link><pubDate>Tue, 16 Nov 2021 00:00:00 +0000</pubDate><guid>http://blog.almost.education/posts/read-time-el/</guid><description>An Emacs function that tells you how long it takes to read things.</description></item><item><title>dired-listing-switches and ls</title><link>http://blog.almost.education/posts/dired-listing-switches/</link><pubDate>Sat, 13 Nov 2021 19:35:28 +0000</pubDate><guid>http://blog.almost.education/posts/dired-listing-switches/</guid><description>Have you ever been unsatisfied with the way that dired1 lists your files? Ever wished it wouldn&amp;#39;t show you the group and owner for every file despite them all being exactly the same? Want to get those directories out of the way of your files?
… enter dired-listing-switches.
The first time I saw this variable set in another person&amp;#39;s init.el I thought it must be a kind of magic.</description></item><item><title>Creating private org directories</title><link>http://blog.almost.education/posts/private-org-dirs/</link><pubDate>Wed, 10 Nov 2021 00:00:00 +0000</pubDate><guid>http://blog.almost.education/posts/private-org-dirs/</guid><description>Org directories made private.</description></item><item><title>Revisiting the Baader–Meinhof phenomenon</title><link>http://blog.almost.education/posts/baader-meinhof-2/</link><pubDate>Sat, 30 Oct 2021 16:45:16 +0000</pubDate><guid>http://blog.almost.education/posts/baader-meinhof-2/</guid><description>I will update this post as events unfold.
In a previous post, I explained how I set out to test the Baader–Meinhof phenomenon using a randomly chosen set of five topics which I would look out for to determine an average time until they were seen again.
Subconscious seeking?
Events &amp;lt;2021-10-23 Sat 22:05&amp;gt; — Looking for more topics to extend the group to 10 or 15, the first I found that I had heard of already was… a Robbie Williams album.</description></item><item><title>Serialising with Java generics</title><link>http://blog.almost.education/posts/serialising-java-generics/</link><pubDate>Wed, 27 Oct 2021 00:00:00 +0000</pubDate><guid>http://blog.almost.education/posts/serialising-java-generics/</guid><description>Serialising and deserialising with Java generics and TypeReferences.</description></item><item><title>Testing the Baader–Meinhof phenomenon</title><link>http://blog.almost.education/posts/baader-meinhof/</link><pubDate>Sat, 23 Oct 2021 00:00:00 +0000</pubDate><guid>http://blog.almost.education/posts/baader-meinhof/</guid><description>Why do I keep seeing certain things again and again?</description></item><item><title>æ/bang.el</title><link>http://blog.almost.education/posts/bang-el/</link><pubDate>Wed, 20 Oct 2021 00:00:00 +0000</pubDate><guid>http://blog.almost.education/posts/bang-el/</guid><description>Use DuckDuckGo&amp;#39;s !Bangs from the comfort of Emacs!</description></item></channel></rss>