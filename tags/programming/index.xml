<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>programming on blog.AlmostEducated</title><link>http://blog.almost.education/tags/programming/</link><description>Recent content in programming on blog.AlmostEducated</description><generator>Hugo -- gohugo.io</generator><language>en-gb</language><lastBuildDate>Wed, 05 Jan 2022 21:32:01 +0000</lastBuildDate><atom:link href="http://blog.almost.education/tags/programming/index.xml" rel="self" type="application/rss+xml"/><item><title>æ/Isogeny</title><link>http://blog.almost.education/posts/isogeny/</link><pubDate>Wed, 05 Jan 2022 21:32:01 +0000</pubDate><guid>http://blog.almost.education/posts/isogeny/</guid><description>&lt;p>
Read the code: &lt;a href="https://github.com/educatedalmost/isogeny">Isogeny&lt;/a>&lt;/p>
&lt;p>
At any one time I have at least four machines running Linux: a desktop, a laptop, a server, and a phone. Keeping the &lt;a href="https://github.com/EducatedAlmost/.dotfiles">configuration&lt;/a> for the four systems in line can be a challenge — for some programmes it will be the same for all machines, and for others there will be almost nothing in common between the server and phone.&lt;/p>
&lt;p>
In my most naïve approach, I kept a single file in version control and made edits to the working copy without committing them, but this is unable to receive changes from upstream. Next I kept a separate file for each machine, but this meant keeping four files perfectly just out-of-sync, and programmes often had difficulty knowing which config file to use.&lt;/p>
&lt;p>
The first breakthrough came when I realised I could make certain parts of my Emacs configuration dynamic:&lt;/p>
&lt;div class="src src-lisp">
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-lisp" data-lang="lisp">&lt;span class="p">(&lt;/span>&lt;span class="k">setq&lt;/span> &lt;span class="nv">settings&lt;/span>
&lt;span class="o">&amp;#39;&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="s">&amp;#34;phobos&amp;#34;&lt;/span> &lt;span class="o">.&lt;/span> &lt;span class="p">((&lt;/span>&lt;span class="nv">mono-font-size&lt;/span> &lt;span class="o">.&lt;/span> &lt;span class="mi">20&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="nv">var-font-size&lt;/span> &lt;span class="o">.&lt;/span> &lt;span class="mi">28&lt;/span>&lt;span class="p">)))&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;luna&amp;#34;&lt;/span> &lt;span class="o">.&lt;/span> &lt;span class="p">((&lt;/span>&lt;span class="nv">mono-font-size&lt;/span> &lt;span class="o">.&lt;/span> &lt;span class="mi">20&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="nv">var-font-size&lt;/span> &lt;span class="o">.&lt;/span> &lt;span class="mi">28&lt;/span>&lt;span class="p">)))&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;europa&amp;#34;&lt;/span> &lt;span class="o">.&lt;/span> &lt;span class="p">((&lt;/span>&lt;span class="nv">mono-font-size&lt;/span> &lt;span class="o">.&lt;/span> &lt;span class="mi">18&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="nv">var-font-size&lt;/span> &lt;span class="o">.&lt;/span> &lt;span class="mi">24&lt;/span>&lt;span class="p">)))&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;ceres&amp;#34;&lt;/span> &lt;span class="o">.&lt;/span> &lt;span class="p">((&lt;/span>&lt;span class="nv">mono-font-size&lt;/span> &lt;span class="o">.&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="nv">var-font-size&lt;/span> &lt;span class="o">.&lt;/span> &lt;span class="mi">12&lt;/span>&lt;span class="p">)))))&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="nb">defun&lt;/span> &lt;span class="nv">fetch-setting&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nv">setting&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="nf">cdr&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nf">assoc&lt;/span> &lt;span class="nv">setting&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="nf">cdr&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nf">assoc&lt;/span> &lt;span class="nv">system-name&lt;/span> &lt;span class="nv">settings&lt;/span>&lt;span class="p">)))))&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="k">setq&lt;/span> &lt;span class="nv">doom-font&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nv">font-spec&lt;/span> &lt;span class="ss">:family&lt;/span> &lt;span class="s">&amp;#34;Fira code&amp;#34;&lt;/span>
&lt;span class="ss">:size&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nv">fetch-setting&lt;/span> &lt;span class="ss">&amp;#39;mono-font-size&lt;/span>&lt;span class="p">)))&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>
This has its limitations. It doesn&amp;#39;t work for any programme that doesn&amp;#39;t use a programming language to define its configuration, excluding just about anything that doesn&amp;#39;t use Lisp, Vimscript, Lua, or shell scripts.&lt;/p>
&lt;p>
To my knowledge, there is no reliable way to have &lt;em>toml&lt;/em>, &lt;em>json&lt;/em>, or &lt;em>yaml&lt;/em> files perform variable substitution or read conditionals. The closest I came was to use Bash to write the machine-specific configuration in &lt;code>~/.bash_profile&lt;/code>&lt;sup class="footnote-reference">&lt;a id="footnote-reference-1" href="#footnote-1">1&lt;/a>&lt;/sup> when it was run by the login shell&lt;sup class="footnote-reference">&lt;a id="footnote-reference-2" href="#footnote-2">2&lt;/a>&lt;/sup>.&lt;/p>
&lt;div class="src src-sh">
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="nv">DOT&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="nv">$HOME&lt;/span>/.dotfiles
&lt;span class="nv">CUSTOM&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="nv">$DOT&lt;/span>/i3/.i3/config.&lt;span class="nv">$HOSTNAME&lt;/span>
&lt;span class="nv">DEFAULT&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="nv">$DOT&lt;/span>/i3/.i3/config.default
&lt;span class="k">if&lt;/span> &lt;span class="o">[[&lt;/span> -f &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$CUSTOM&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> &lt;span class="o">]]&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">then&lt;/span>
cat &lt;span class="nv">$CUSTOM&lt;/span> &amp;gt; &lt;span class="nv">$DOT&lt;/span>/i3/.i3/config
&lt;span class="k">else&lt;/span>
cat &lt;span class="nv">$DEFAULT&lt;/span> &amp;gt; &lt;span class="nv">$DOT&lt;/span>/i3/.i3/config
&lt;span class="k">fi&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>
I was initially hopeful that I could use the machine-specific configuration just to append to a larger, shared configuration, but it was not to be. The files don&amp;#39;t always allow their section to be moved around on a whim, and moving a line into machine-specific configuration required one to remember to do the same for every machine. It also adds a huge amount of cruft to &lt;code>~/.bash_profile&lt;/code>, when I keep configuration for ~20 programmes this means ~150 lines of ifs and elses cluttering what should be a simple file.&lt;/p>
&lt;p>
Here I got the idea for Isogeny. It does the work at the same moment, but in a Clojure script and using the brilliant Selmer&lt;sup class="footnote-reference">&lt;a id="footnote-reference-3" href="#footnote-3">3&lt;/a>&lt;/sup> template rendering library.&lt;/p>
&lt;p>
Instead of appending, Isogeny uses substitution points in a template, which might be familiar to anyone who has used templates in front-end development.&lt;/p>
&lt;div class="src src-text">
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">...
Font size: {{ font.size }}
Font family: {{ font.family }}
Ports: {% for port in ports %}
Port: {{ port }} {% endfor %}
...&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>
The values of the variables is provided by a &lt;em>context&lt;/em> in an EDN file.&lt;/p>
&lt;div class="src src-clojure">
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-clojure" data-lang="clojure">&lt;span class="p">{&lt;/span>&lt;span class="ss">:font&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="ss">:size&lt;/span> &lt;span class="mi">12&lt;/span>
&lt;span class="ss">:family&lt;/span> &lt;span class="s">&amp;#34;Fira mono&amp;#34;&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="ss">:ports&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">3355&lt;/span> &lt;span class="mi">3356&lt;/span>&lt;span class="p">]}&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>
The user should keep a different context for each machine. They can be named something like &lt;code>programme.&amp;lt;HOSTNAME&amp;gt;.edn&lt;/code> so that the correct context can easily be picked using &lt;code>programme.$HOSTNAME.edn&lt;/code>&lt;sup class="footnote-reference">&lt;a id="footnote-reference-2" href="#footnote-2">2&lt;/a>&lt;/sup>.&lt;/p>
&lt;p>
The final result should be the rendered file in the correct position to be used by its programme.&lt;/p>
&lt;div class="src src-text">
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">...
Font size: 12
Font family: Fira mono
Ports:
Port: 3355
Port: 3356
...&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>
Calls to Isogeny look like so:&lt;/p>
&lt;div class="src src-sh">
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">./isogeny.clj -t foo.template &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> -c foo.context.specific.edn &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> -d foo.context.default.edn &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> -o foo.config&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>
The default context provides for a fallback should the specific context be missing, something that is useful when something has been misconfigured or when using a new machine. It can be inconvenient to have a display manager or window manager fail to launch.&lt;/p>
&lt;p>
Isogeny can help you prepare your config for use with Isogeny, it leaves the current config in place.&lt;/p>
&lt;div class="src src-sh">
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">./isogeny.clj --prepare ~/path/to/config
&lt;span class="c1"># =&amp;gt; ~/path/to/config.template, a copy of current config&lt;/span>
&lt;span class="c1"># =&amp;gt; ~/path/to/config.&amp;lt;HOSTNAME&amp;gt;.edn, an empty context to edit&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>
In the couple of days since I wrote the first working version of Isogeny, I have had great fun coming up with new functionality and seeing just how quickly I could implement it. These include:&lt;/p>
&lt;dl>
&lt;dt>
&lt;code>--add-tags&lt;/code>
&lt;/dt>
&lt;dd>add custom tags to the renderer&lt;/dd>
&lt;dt>
&lt;code>--strict&lt;/code>
&lt;/dt>
&lt;dd>fail when a value is missing&lt;/dd>
&lt;dt>
&lt;code>--context-string&lt;/code>
&lt;/dt>
&lt;dd>provide context as a CLI option that overrides values in the file&lt;/dd>
&lt;dt>
&lt;code>--deep-merge&lt;/code>
&lt;/dt>
&lt;dd>use deep-merge rather than merge when overriding&lt;/dd>
&lt;dt>
&lt;code>--verbose&lt;/code>
&lt;/dt>
&lt;dd>provide detailed logging&lt;/dd>
&lt;dt>
&lt;code>--safe&lt;/code>
&lt;/dt>
&lt;dd>will not edit or overwrite existing files&lt;/dd>
&lt;dt>
&lt;code>--multi-template&lt;/code>
&lt;/dt>
&lt;dd>render multiple templates with a single call to Isogeny&lt;/dd>
&lt;dt>
&lt;code>--prepare&lt;/code>
&lt;/dt>
&lt;dd>prepare config to be used with Isogeny&lt;/dd>
&lt;/dl>
&lt;p>With these added features, I think that Isogeny fits the use cases of almost everyone conscious of configuration. Now my configuration setup looks like this, run on login:&lt;/p>
&lt;div class="src src-sh">
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">~/bin/isogeny.clj --multi-template &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> -c ~/.dotfiles/isogeny/context.&lt;span class="nv">$HOSTNAME&lt;/span>.edn &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> -d ~/.dotfiles/isogeny/context.default.edn &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> --strict --verbose --deep-merge &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> ~/.config/sway/config.template &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> ~/.config/alacritty/alacritty.yml.template &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> ~/.config/dunst/dunstrc.template &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> ~/.config/gammastep/config.ini.template&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>
And with that, all my files are configured to this machine. Please, give it a &lt;a href="https://github.com/educatedalmost/isogeny">try&lt;/a>, submit issues and feature requests, and keep your configuration in good order.&lt;/p>
&lt;div class="footnotes">
&lt;hr class="footnotes-separatator">
&lt;div class="footnote-definitions">
&lt;div class="footnote-definition">
&lt;sup id="footnote-1">&lt;a href="#footnote-reference-1">1&lt;/a>&lt;/sup>
&lt;div class="footnote-body">
&lt;p>On some systems, it is &lt;code>~/.profile&lt;/code> that is sourced on login, not &lt;code>~/.bash_profile&lt;/code>.&lt;/p>
&lt;/div>
&lt;/div>
&lt;div class="footnote-definition">
&lt;sup id="footnote-2">&lt;a href="#footnote-reference-2">2&lt;/a>&lt;/sup>
&lt;div class="footnote-body">
&lt;p>&lt;code>HOSTNAME&lt;/code> is available in Bash, &lt;code>HOST&lt;/code> in Zsh, or just use &lt;code>$(uname -n)&lt;/code>.&lt;/p>
&lt;/div>
&lt;/div>
&lt;div class="footnote-definition">
&lt;sup id="footnote-3">&lt;a href="#footnote-reference-3">3&lt;/a>&lt;/sup>
&lt;div class="footnote-body">
&lt;p>Isogeny owes a great debt to &lt;a href="https://github.com/yogthos/Selmer">Selmer&lt;/a>, the work of Yogthos.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div></description></item><item><title>Clojure CLI apps using GraalVM</title><link>http://blog.almost.education/posts/clojure-cli-graal/</link><pubDate>Tue, 14 Dec 2021 18:28:42 +0000</pubDate><guid>http://blog.almost.education/posts/clojure-cli-graal/</guid><description>
&lt;p>
Clojure, like other JVM languages, excels in long-running tasks&lt;sup class="footnote-reference">&lt;a id="footnote-reference-1" href="#footnote-1">1&lt;/a>&lt;/sup>. But I was always jealous of the languages that I&amp;#39;d used for scripting and command line tools which can&amp;#39;t wait a second for a JVM to start for each invocation. Despite its slow startup time, the JVM shines at peak throughput. Some times we want one, sometimes the other. For tasks that have a very short lifetime (~1s), we need Ahead of Time compilation.&lt;/p>
&lt;div id="outline-container-headline-1" class="outline-2">
&lt;h2 id="headline-1">
AOT vs. JIT
&lt;/h2>
&lt;div id="outline-text-headline-1" class="outline-text-2">
&lt;p>
Whatever happens, the code you write is translated to machine code that is executed on the host machine. One might think that, when compiling C, this is a single step, but it is a process from preprocessor to compiler to assembler and then linker. At the end of this, all of the machine code has been produced before the programme is run.&lt;/p>
&lt;div id="outline-container-headline-2" class="outline-3">
&lt;h3 id="headline-2">
JIT
&lt;/h3>
&lt;div id="outline-text-headline-2" class="outline-text-3">
&lt;p>
Not so with Java and JVM languages. When one &amp;#39;&lt;em>compiles&lt;/em>&amp;#39; a JVM project, say by calling &lt;code>javac&lt;/code>, one produces bytecode — not machine code. When the programme is run and the JVM is started, the JVM does the work of compiling its bytecode into machine code on an &lt;em>ad hoc&lt;/em> basis as methods are called, hence the name &lt;em>just-in-time&lt;/em> compilation&lt;sup class="footnote-reference">&lt;a id="footnote-reference-2" href="#footnote-2">2&lt;/a>&lt;/sup>.&lt;/p>
&lt;p>
JIT has its benefits. It can make optimisations because it knows exactly the machine it is compiling for, whereas with C the build machine will likely be different from the machine the code runs on. The JVM also has the ability to profile the code as it runs and make optimisations based on how the code is actually used. Say in the code there is are references to &lt;code>foo.bar(false, n)&lt;/code> and &lt;code>foo.bar(true, n)&lt;/code> but as the code is run the latter is called millions of times more often than the former. JIT compilation can see this and optimise calls to &lt;code>foo.bar&lt;/code> where the first argument is &lt;code>true&lt;/code>. This is the sort of information that is not available when compiling beforehand.&lt;/p>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-3" class="outline-3">
&lt;h3 id="headline-3">
AOT
&lt;/h3>
&lt;div id="outline-text-headline-3" class="outline-text-3">
&lt;p>
Perhaps, by now, you have guessed that the alternative is &lt;em>ahead-of-time&lt;/em> compilation. Compiling ahead of time, there is no need for a JVM to run, and thus no profiling and no &lt;em>ad hoc&lt;/em> compilation. The result is a programme that starts instantly and with a &lt;em>much&lt;/em> smaller memory footprint (~×10).&lt;/p>
&lt;p>
For two decades, there was no other way to run JVM languages except on the JVM by way of JIT. But now, with the release of &lt;a href="https://www.graalvm.org/">GraalVM&lt;/a> in 2019, we can now compile our JVM programmes via AOT, straight to machine code.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-4" class="outline-2">
&lt;h2 id="headline-4">
GraalVM
&lt;/h2>
&lt;div id="outline-text-headline-4" class="outline-text-2">
&lt;p>
GraalVM, from the Old French &lt;em>graal&lt;/em> meaning &lt;em>grail&lt;/em>, is an Oracle project comprising:&lt;/p>
&lt;ul>
&lt;li>GraalVM Compiler, a JIT compiler for Java&lt;/li>
&lt;li>GraalVM Native Image, a AOT compiler for Java&lt;/li>
&lt;li>Truffle Language Implementation Framework, a specification for running other languages on GraalVM&lt;/li>
&lt;li>LLVM and Javascript runtimes&lt;/li>
&lt;/ul>
&lt;p>We&amp;#39;re interested in the AOT compiler. First we need a copy of GraalVM; go to &lt;a href="https://www.graalvm.org/downloads/">https://www.graalvm.org/downloads/&lt;/a> and download the appropriate package, or if using Arch one install it from the &lt;a href="https://aur.archlinux.org/packages/native-image-jdk11-bin/">AUR&lt;/a>.&lt;/p>
&lt;p>
From wherever you install external binaries (&lt;code>/usr/bin&lt;/code>, &lt;code>~/bin&lt;/code>), extract the archive and set its location as an environment variable:&lt;/p>
&lt;div class="src src-text">
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">tar -xzvf ~/dl/graalvm-ce-java11-linux-amd64-21.3.0.tar.gz
export GRAALVM_HOME=~/bin/graalvm-ce-java11-21.3.0&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>
This might not add Graal&amp;#39;s executables to your PATH, but they can be run using &lt;code>$GRAALVM_HOME/bin/...&lt;/code> etc.. If you encounter permissions issues, you might have to run &lt;code>chmod +x &amp;lt;executable&amp;gt;&lt;/code> for the file to be able to be executed.&lt;/p>
&lt;div id="outline-container-headline-5" class="outline-3">
&lt;h3 id="headline-5">
&lt;em>Hello Graal&lt;/em>
&lt;/h3>
&lt;div id="outline-text-headline-5" class="outline-text-3">
&lt;p>
I keep all my source code in &lt;code>~/src&lt;/code>, make changes to the commands for your system. These commands create a new Clojure project.&lt;/p>
&lt;div class="src src-bash">
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">mkdir -p ~/src/hello-graal/src/hello_graal
&lt;span class="nb">cd&lt;/span> ~/src/hello-graal
touch ./src/hello_graal/main.clj&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>
And in &lt;code>main.clj&lt;/code> create this very simple &lt;em>Hello World&lt;/em> application.&lt;/p>
&lt;div class="src src-clojure">
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-clojure" data-lang="clojure">&lt;span class="p">(&lt;/span>&lt;span class="kd">ns &lt;/span>&lt;span class="nv">hello-graal.main&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="ss">:gen-class&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="kd">defn &lt;/span>&lt;span class="nv">-main&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="nv">_args&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="nb">println &lt;/span>&lt;span class="s">&amp;#34;Hello Graal!&amp;#34;&lt;/span>&lt;span class="p">))&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>
We can use Clojure&amp;#39;s &lt;code>compile&lt;/code> to compile the namespace into classfiles, as one would with &lt;code>javac&lt;/code>. The bytecode in the classfiles would normally be used by the JVM, but we will use them with Graal&amp;#39;s &lt;code>native-image&lt;/code> to produce an executable binary. Graal doesn&amp;#39;t explicitly support Clojure, but once Clojure is compiled to bytecode it is just the same as any other JVM language, including Java.&lt;/p>
&lt;div class="src src-text">
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">mkdir classes
clojure -M -e &amp;#34;(compile &amp;#39;hello-graal.main)&amp;#34;&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>
We can write a script, &lt;code>compile&lt;/code>, that contains the call to Graal&amp;#39;s &lt;code>native-image&lt;/code>.&lt;/p>
&lt;div class="src src-bash">
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="cp">#!/usr/bin/env bash
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">[&lt;/span> -z &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$GRAALVM_HOME&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> &lt;span class="o">]&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">then&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s1">&amp;#39;Please set GRAALVM_HOME&amp;#39;&lt;/span>
&lt;span class="nb">exit&lt;/span> &lt;span class="m">1&lt;/span>
&lt;span class="k">fi&lt;/span>
mkdir classes
clojure -M -e &lt;span class="s2">&amp;#34;(compile &amp;#39;hello-graal.main)&amp;#34;&lt;/span>
&lt;span class="c1"># Ensure Graal native-image program is installed&lt;/span>
&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$GRAALVM_HOME&lt;/span>&lt;span class="s2">/bin/gu&amp;#34;&lt;/span> install native-image
&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$GRAALVM_HOME&lt;/span>&lt;span class="s2">/bin/native-image&amp;#34;&lt;/span> &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> -cp &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="k">$(&lt;/span>clojure -Spath&lt;span class="k">)&lt;/span>&lt;span class="s2">:classes&amp;#34;&lt;/span> &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> -H:Name&lt;span class="o">=&lt;/span>hello-graal &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> -H:+ReportExceptionStackTraces &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> --initialize-at-build-time &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> --verbose &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> --no-fallback &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> --no-server &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> &lt;span class="s2">&amp;#34;-J-Xmx3g&amp;#34;&lt;/span> &lt;span class="se">\
&lt;/span>&lt;span class="se">&lt;/span> hello_graal.main&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>
When this script is run it produces an executable, &lt;code>hello-graal&lt;/code>. Give it a try!&lt;/p>
&lt;div class="src src-text">
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">chmod +x compile
./compile
./hello-graal&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-6" class="outline-3">
&lt;h3 id="headline-6">
Next steps
&lt;/h3>
&lt;div id="outline-text-headline-6" class="outline-text-3">
&lt;p>
This is a subject I&amp;#39;d like to return to. I see great promise for the role of Clojure in creating native applications. Graal&amp;#39;s already being used by &lt;a href="https://github.com/babashka/babashka">Babashka&lt;/a>, &lt;a href="https://github.com/clojure-lsp/clojure-lsp">clojure-lsp&lt;/a>, and &lt;a href="https://github.com/clj-kondo/clj-kondo">clj-kondo&lt;/a>, three tools I use on a daily basis.&lt;/p>
&lt;p>
Our next steps might be to add the ability to add command-line options and arguments using &lt;a href="https://github.com/clojure/tools.cli">tools.cli&lt;/a>. And we can read from &lt;code>stdin&lt;/code> using &lt;code>(new java.io.BufferedReader *in*)&lt;/code>.&lt;/p>
&lt;div class="src src-clojure">
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-clojure" data-lang="clojure">&lt;span class="p">(&lt;/span>&lt;span class="kd">ns &lt;/span>&lt;span class="nv">hello-graal.main&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="ss">:require&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="nv">clojure.tools.cli&lt;/span> &lt;span class="ss">:as&lt;/span> &lt;span class="nv">cli&lt;/span>&lt;span class="p">]))&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="k">def &lt;/span>&lt;span class="nv">cli-options&lt;/span>
&lt;span class="p">[[&lt;/span>&lt;span class="s">&amp;#34;-v&amp;#34;&lt;/span> &lt;span class="s">&amp;#34;--verbose&amp;#34;&lt;/span> &lt;span class="s">&amp;#34;Verbosity&amp;#34;&lt;/span>&lt;span class="p">]])&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="kd">defn &lt;/span>&lt;span class="nv">-main&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="o">&amp;amp;&lt;/span> &lt;span class="nv">args&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="k">let &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nv">opts&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nf">cli/parse-opts&lt;/span> &lt;span class="nv">args&lt;/span> &lt;span class="nv">cli-options&lt;/span>&lt;span class="p">)]&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="nb">doseq &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nv">ln&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nb">line-seq &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">new &lt;/span>&lt;span class="nv">java.io.BufferedReader&lt;/span> &lt;span class="nv">*in*&lt;/span>&lt;span class="p">))]&lt;/span>
&lt;span class="c1">;; Use a line from input.&lt;/span>
&lt;span class="p">)))&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>
In part two I will show how to replicate some of the functionality of clj-kondo, and then implement some missing features.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="footnotes">
&lt;hr class="footnotes-separatator">
&lt;div class="footnote-definitions">
&lt;div class="footnote-definition">
&lt;sup id="footnote-1">&lt;a href="#footnote-reference-1">1&lt;/a>&lt;/sup>
&lt;div class="footnote-body">
&lt;p>&lt;a href="https://www.youtube.com/watch?v=PeMvksAZbdw&amp;amp;t=647s">Maximising Java Application Performance with GraalVM&lt;/a> by Oleg Šelajev at GOTO 2020.&lt;/p>
&lt;/div>
&lt;/div>
&lt;div class="footnote-definition">
&lt;sup id="footnote-2">&lt;a href="#footnote-reference-2">2&lt;/a>&lt;/sup>
&lt;div class="footnote-body">
&lt;p>
The earliest possible mention of JIT I know of is from John McCarthy of Lisp fame:&lt;/p>
&lt;blockquote>
&lt;p>The programmer may have selected S-functions compiled into machine
language programs put into the core memory. Values of compiled functions
are computed about 60 times as fast as they would if interpreted. Compilation
is fast enough so that it is not necessary to punch compiled program for future
use.&lt;/p>
&lt;/blockquote>
&lt;p>— &lt;a href="http://www-formal.stanford.edu/jmc/recursive.pdf">Recursive Functions of Symbolic Expressions and Their Computation by Machine, Part I, 1960&lt;/a>&lt;/p>
&lt;blockquote>
&lt;p>Instead, we suspect that the earliest published work on JIT compilation was McCarthy’s [1960] LISP paper. He men- tioned compilation of functions into ma- chine language, a process fast enough that the compiler’s output needn’t be saved. This can be seen as an inevitable result of having programs and data share the same notation [McCarthy 1981].&lt;/p>
&lt;/blockquote>
&lt;p>— &lt;a href="https://www.eecs.ucf.edu/~dcm/Teaching/COT4810-Spring2011/Literature/JustInTimeCompilation.pdf">John Aycock, 2003&lt;/a>&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div></description></item><item><title>Clojure's rarer threading macros: some-> and cond-></title><link>http://blog.almost.education/posts/clojure-threading-macros/</link><pubDate>Thu, 09 Dec 2021 19:43:18 +0000</pubDate><guid>http://blog.almost.education/posts/clojure-threading-macros/</guid><description>
&lt;p>
I use Clojure&amp;#39;s threading macros perhaps more than I should, but I do so because they mimic the way I think about the code I write. A lisp programme is a tree and yet most of the programmes that we write are, or should be, lines of functions acting on a datastructure&lt;sup class="footnote-reference">&lt;a id="footnote-reference-1" href="#footnote-1">1&lt;/a>&lt;/sup> &lt;sup class="footnote-reference">&lt;a id="footnote-reference-2" href="#footnote-2">2&lt;/a>&lt;/sup>.&lt;/p>
&lt;div id="outline-container-headline-1" class="outline-2">
&lt;h2 id="headline-1">
The value of threading macros
&lt;/h2>
&lt;div id="outline-text-headline-1" class="outline-text-2">
&lt;div class="src src-clojure">
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-clojure" data-lang="clojure">&lt;span class="p">(&lt;/span>&lt;span class="nb">* &lt;/span>&lt;span class="mi">3&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nb">+ &lt;/span>&lt;span class="mi">2&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nb">- &lt;/span>&lt;span class="mi">10&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nb">+ &lt;/span>&lt;span class="mi">10&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nb">/ &lt;/span>&lt;span class="mi">2&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">)))))&lt;/span>
&lt;span class="o">^&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>
To grok this code I have to start from the bottommost leaf, in this case &lt;code>(/ 2 2)&lt;/code>, yet it is at the line&amp;#39;s far right contrary to where it is natural for me and most of the world&lt;sup class="footnote-reference">&lt;a id="footnote-reference-3" href="#footnote-3">3&lt;/a>&lt;/sup> to start reading. Conversely the same code written with a threading macro mirrors how we think about what the code is doing.&lt;/p>
&lt;div class="src src-clojure">
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-clojure" data-lang="clojure">&lt;span class="p">(&lt;/span>&lt;span class="nb">-&amp;gt; &lt;/span>&lt;span class="mi">2&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nb">/ &lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nb">+ &lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nb">- &lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nb">+ &lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nb">* &lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="o">^&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>
They also force the programmer into writing &lt;em>simpler&lt;/em> code because threading macros don&amp;#39;t handle trees well.&lt;/p>
&lt;div class="src src-clojure">
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-clojure" data-lang="clojure">&lt;span class="p">(&lt;/span>&lt;span class="nb">-&amp;gt; &lt;/span>&lt;span class="mi">2&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="nb">/ &lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="nb">+ &lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="nb">- &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">-&amp;gt; &lt;/span>&lt;span class="mi">25&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nb">/ &lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nb">* &lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">)))&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="nb">+ &lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="nb">* &lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">))&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>
What a mess. It&amp;#39;s much better to split it into two linear forms.&lt;/p>
&lt;div class="src src-clojure">
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-clojure" data-lang="clojure">&lt;span class="c1">;; Better do this&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="k">let &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nv">x&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nb">-&amp;gt; &lt;/span>&lt;span class="mi">25&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nb">/ &lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nb">* &lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">))]&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="nb">-&amp;gt; &lt;/span>&lt;span class="mi">2&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nb">/ &lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nb">+ &lt;/span>&lt;span class="mi">10&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nb">- &lt;/span>&lt;span class="nv">x&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nb">+ &lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nb">* &lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">)))&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>
So threading macros help make easy things simple and complex things hard&lt;sup class="footnote-reference">&lt;a id="footnote-reference-4" href="#footnote-4">4&lt;/a>&lt;/sup>.&lt;/p>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-2" class="outline-2">
&lt;h2 id="headline-2">
&lt;code>as-&amp;gt;&lt;/code>
&lt;/h2>
&lt;div id="outline-text-headline-2" class="outline-text-2">
&lt;p>
&lt;a href="https://clojuredocs.org/clojure.core/as-%3E">&lt;code>as-&amp;gt;&lt;/code>&lt;/a> allows one to use a symbol to specify where the threaded value goes in each form. It is helpful when the threaded value&amp;#39;s position in the function&amp;#39;s arguments changes. Some Clojure functions take the datastructure as the first argument, others take a function.&lt;/p>
&lt;div class="src src-clojure">
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-clojure" data-lang="clojure">&lt;span class="p">(&lt;/span>&lt;span class="nf">as-&amp;gt;&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nf">db/get&lt;/span> &lt;span class="nv">id&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nv">$&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="nf">update&lt;/span> &lt;span class="nv">$&lt;/span> &lt;span class="ss">:foo&lt;/span> &lt;span class="nv">f&lt;/span> &lt;span class="nv">x&lt;/span> &lt;span class="nv">y&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="nb">map &lt;/span>&lt;span class="nv">g&lt;/span> &lt;span class="nv">$&lt;/span>&lt;span class="p">))&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-3" class="outline-2">
&lt;h2 id="headline-3">
&lt;code>some-&amp;gt;&lt;/code>
&lt;/h2>
&lt;div id="outline-text-headline-3" class="outline-text-2">
&lt;p>
&lt;a href="https://clojuredocs.org/clojure.core/some-%3E">&lt;code>some-&amp;gt;&lt;/code>&lt;/a> works similarly to &lt;code>-&amp;gt;&lt;/code>, except that evaluation of the form terminates as soon as the threaded value becomes &lt;code>nil&lt;/code>. It&amp;#39;s named for &lt;a href="https://clojuredocs.org/clojure.core/some_q">&lt;code>some?&lt;/code>&lt;/a> which only returns &lt;code>false&lt;/code> if its argument is &lt;code>nil&lt;/code>. It is, generally, unnecessary in Clojure. Why? Because Clojure&amp;#39;s core functions, and the functions that we write, gracefully handle &lt;code>nil&lt;/code>.&lt;/p>
&lt;div class="src src-clojure">
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-clojure" data-lang="clojure">&lt;span class="p">(&lt;/span>&lt;span class="nb">map + &lt;/span>&lt;span class="nv">nil&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">; =&amp;gt; ()&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="nb">assoc &lt;/span>&lt;span class="nv">nil&lt;/span> &lt;span class="ss">:k&lt;/span> &lt;span class="ss">:v&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">; =&amp;gt; {:k :v}&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="nb">dissoc &lt;/span>&lt;span class="nv">nil&lt;/span> &lt;span class="ss">:k&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">; =&amp;gt; nil&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="nb">str &lt;/span>&lt;span class="nv">nil&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">; =&amp;gt; &amp;#34;&amp;#34;&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="nb">+ &lt;/span>&lt;span class="nv">nil&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">; =&amp;gt; nil&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="nb">- &lt;/span>&lt;span class="nv">nil&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">; =&amp;gt; NullPointerException,&lt;/span>
&lt;span class="c1">; it&amp;#39;s not always the case&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>
The same cannot be said for calling functions in Java. Try adding a value to a null &lt;code>HashMap&lt;/code>, or &lt;code>.toString&lt;/code> on a null object, and you&amp;#39;ll throw a &lt;code>NullPointerException&lt;/code>.&lt;/p>
&lt;div class="src src-clojure">
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-clojure" data-lang="clojure">&lt;span class="p">(&lt;/span>&lt;span class="nb">-&amp;gt; &lt;/span>&lt;span class="nv">id&lt;/span>
&lt;span class="nv">db/find-by-id&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="nf">.put&lt;/span> &lt;span class="s">&amp;#34;foo&amp;#34;&lt;/span> &lt;span class="s">&amp;#34;bar&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nv">db/save&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="nb">-&amp;gt; &lt;/span>&lt;span class="nv">id&lt;/span>
&lt;span class="nv">db/find-by-id&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="nb">assoc &lt;/span>&lt;span class="ss">:id&lt;/span> &lt;span class="nv">id&lt;/span> &lt;span class="s">&amp;#34;foo&amp;#34;&lt;/span> &lt;span class="s">&amp;#34;bar&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nv">db/save&lt;/span>&lt;span class="p">)&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>
If &lt;code>db/find-by-id&lt;/code> returns &lt;code>nil&lt;/code>, implying a missing entity, the first form will explode when it tries to &lt;code>.put&lt;/code> on a &lt;code>null&lt;/code> object. The second gracefully creates and saves a new entity. If we still need to deal with the Java method, we can do so by either wrapping the form in a &lt;code>try&lt;/code> form, or use &lt;code>some-&amp;gt;&lt;/code>.&lt;/p>
&lt;div class="src src-clojure">
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-clojure" data-lang="clojure">&lt;span class="p">(&lt;/span>&lt;span class="nf">if-some&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="nv">save-result&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nf">some-&amp;gt;&lt;/span> &lt;span class="nv">id&lt;/span>
&lt;span class="nv">db/find-by-id&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="nf">.put&lt;/span> &lt;span class="s">&amp;#34;foo&amp;#34;&lt;/span> &lt;span class="s">&amp;#34;bar&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nv">db/save&lt;/span>&lt;span class="p">)]&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="nf">handle-success&lt;/span> &lt;span class="nv">save-result&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="nf">handle-missing-entity&lt;/span> &lt;span class="nv">id&lt;/span>&lt;span class="p">))&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>
&lt;code>if-some&lt;/code> is just like &lt;code>if-let&lt;/code>, except instead of the test failing for falsy values, it fails for &lt;code>nil&lt;/code> values. Equivalently, the test passes for &lt;code>(some? test)&lt;/code> instead of &lt;code>(true? test)&lt;/code>.&lt;/p>
&lt;p>
When &lt;code>db/find-by-id&lt;/code> returns &lt;code>nil&lt;/code>, &lt;code>some-&amp;gt;&lt;/code> immediately returns &lt;code>nil&lt;/code> without evaluating the remaining forms of the threading macro, &lt;code>.put&lt;/code> and &lt;code>db/save&lt;/code>. &lt;code>if-some&lt;/code> then handles the case of a missing entity. Otherwise, as long as &lt;code>db/save&lt;/code> returns any non-&lt;code>nil&lt;/code> value, it is bound to &lt;code>save-result&lt;/code> and &lt;code>(handle-success save-result)&lt;/code> will be called, even if the result is &lt;code>false&lt;/code>.&lt;/p>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-4" class="outline-2">
&lt;h2 id="headline-4">
&lt;code>cond-&amp;gt;&lt;/code>
&lt;/h2>
&lt;div id="outline-text-headline-4" class="outline-text-2">
&lt;p>
I have found &lt;a href="https://clojuredocs.org/clojure.core/cond-%3E">&lt;code>cond-&amp;gt;&lt;/code>&lt;/a>, named for &lt;a href="https://clojuredocs.org/clojure.core/cond">&lt;code>cond&lt;/code>&lt;/a>, to be the biggest code-saver out of any of Clojure&amp;#39;s rarer standard library functions. Again, I use it mostly when working with Java, specifically with Builders. A Builder is one of the most common patterns you will see in object-oriented languages, it works to progressively build up an object, allowing for each field to have a default value, set fields by more convoluted means&lt;sup class="footnote-reference">&lt;a id="footnote-reference-5" href="#footnote-5">5&lt;/a>&lt;/sup>, or verify fields before they are set&lt;sup class="footnote-reference">&lt;a id="footnote-reference-6" href="#footnote-6">6&lt;/a>&lt;/sup>.&lt;/p>
&lt;div class="src src-java">
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">EnterpriseIntegrator&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">foo&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">bar&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">qux&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">quux&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="nf">EnterpriseIntegrator&lt;/span> &lt;span class="o">(&lt;/span>
&lt;span class="n">String&lt;/span> &lt;span class="n">foo&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">bar&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">qux&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">quux&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="c1">// ...
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="o">};&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="nf">newBuilder&lt;/span> &lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">EnterpriseIntegratorBuilder&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">EnterpriseIntegratorBuilder&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">foo&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;foo&amp;#34;&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">bar&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;bar&amp;#34;&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">qux&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;qux&amp;#34;&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">quux&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;quux&amp;#34;&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">EnterpriseIntegratorBuilder&lt;/span> &lt;span class="nf">foo&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">foo&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">foo&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">foo&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="c1">// ...
&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">EnterpriseIntegrator&lt;/span> &lt;span class="nf">build&lt;/span> &lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">EnterpriseIntegrator&lt;/span> &lt;span class="o">(&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">foo&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">bar&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">qux&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">quux&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>
Of course, if this was Clojure we could just do this:&lt;/p>
&lt;div class="src src-clojure">
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-clojure" data-lang="clojure">&lt;span class="p">(&lt;/span>&lt;span class="k">def &lt;/span>&lt;span class="nv">defaults&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="ss">:foo&lt;/span> &lt;span class="s">&amp;#34;foo&amp;#34;&lt;/span> &lt;span class="ss">:bar&lt;/span> &lt;span class="s">&amp;#34;bar&amp;#34;&lt;/span> &lt;span class="ss">:qux&lt;/span> &lt;span class="s">&amp;#34;qux&amp;#34;&lt;/span> &lt;span class="ss">:quux&lt;/span> &lt;span class="s">&amp;#34;quux&amp;#34;&lt;/span>&lt;span class="p">})&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="nb">merge &lt;/span>&lt;span class="nv">defaults&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="ss">:foo&lt;/span> &lt;span class="s">&amp;#34;foobar&amp;#34;&lt;/span> &lt;span class="ss">:bar&lt;/span> &lt;span class="s">&amp;#34;baz&amp;#34;&lt;/span>&lt;span class="p">})&lt;/span>
&lt;span class="c1">;; =&amp;gt; {:foo &amp;#34;foobar&amp;#34; :bar &amp;#34;baz&amp;#34; :qux &amp;#34;qux&amp;#34; :quux &amp;#34;quux&amp;#34;}&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>
But occasionally we will need to use a Java-style Builder.&lt;/p>
&lt;div class="src src-clojure">
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-clojure" data-lang="clojure">&lt;span class="p">(&lt;/span>&lt;span class="nb">-&amp;gt; &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">new &lt;/span>&lt;span class="nv">EnterpriseIntegratorBuilder&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="nf">.foo&lt;/span> &lt;span class="nv">f&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="nf">.bar&lt;/span> &lt;span class="nv">b&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="nf">.qux&lt;/span> &lt;span class="nv">q&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="nf">.quux&lt;/span> &lt;span class="nv">qu&lt;/span>&lt;span class="p">))&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>
This blows up in ones face if this code get called by someone who wants to use the default value and doesn&amp;#39;t want to set &lt;code>foo&lt;/code>. In that case &lt;code>f&lt;/code> is &lt;code>nil&lt;/code> and a &lt;code>NullPointerException&lt;/code> is thrown. &lt;code>cond-&amp;gt;&lt;/code> is a threading macro that allows us to only evaluate a form if a predicate returns true, and can be used to avoid this style of error.&lt;/p>
&lt;div class="src src-clojure">
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-clojure" data-lang="clojure">&lt;span class="p">(&lt;/span>&lt;span class="nf">cond-&amp;gt;&lt;/span> &lt;span class="nv">x&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="nf">pred-1&lt;/span> &lt;span class="nv">f&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nf">.foo&lt;/span> &lt;span class="s">&amp;#34;foo&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="nf">pred-2&lt;/span> &lt;span class="nv">b&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nf">.bar&lt;/span> &lt;span class="s">&amp;#34;bar&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="nf">pred-3&lt;/span> &lt;span class="nv">q&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nf">.qux&lt;/span> &lt;span class="s">&amp;#34;qux&amp;#34;&lt;/span>&lt;span class="p">))&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>
If the predicate returns true, the next form is used as it would be in &lt;code>-&amp;gt;&lt;/code>. Unlike &lt;code>some-&amp;gt;&lt;/code>, if a predicate fails the macro doesn&amp;#39;t terminate, it just moves onto the next predicate.&lt;/p>
&lt;p>
If &lt;code>(pred-2 b)&lt;/code> is the only predicate to fail, it becomes equivalent to this:&lt;/p>
&lt;div class="src src-clojure">
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-clojure" data-lang="clojure">&lt;span class="p">(&lt;/span>&lt;span class="nb">-&amp;gt; &lt;/span>&lt;span class="nv">x&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="nf">.foo&lt;/span> &lt;span class="s">&amp;#34;foo&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="nf">.qux&lt;/span> &lt;span class="s">&amp;#34;qux&amp;#34;&lt;/span>&lt;span class="p">))&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>
We can use this to check that a variable is non-&lt;code>nil&lt;/code> before trying to set the field on the Builder.&lt;/p>
&lt;div class="src src-clojure">
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-clojure" data-lang="clojure">&lt;span class="p">(&lt;/span>&lt;span class="kd">defn &lt;/span>&lt;span class="nv">-&amp;gt;EnterpriseIntegrator&lt;/span> &lt;span class="p">[{&lt;/span>&lt;span class="ss">:keys&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="nv">foo&lt;/span> &lt;span class="nv">bar&lt;/span> &lt;span class="nv">baz&lt;/span>&lt;span class="p">]}]&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="nf">cond-&amp;gt;&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">new &lt;/span>&lt;span class="nv">EnterpriseIntegrator&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="nf">some?&lt;/span> &lt;span class="nv">foo&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nf">.foo&lt;/span> &lt;span class="nv">foo&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="nf">some?&lt;/span> &lt;span class="nv">bar&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nf">.bar&lt;/span> &lt;span class="nv">bar&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="nf">some?&lt;/span> &lt;span class="nv">baz&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nf">.baz&lt;/span> &lt;span class="nv">baz&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nv">true&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nf">.build&lt;/span>&lt;span class="p">)))&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>
And finally we call &lt;code>build&lt;/code> to return the &lt;code>EnterpriseIntegrator&lt;/code>.&lt;/p>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-5" class="outline-2">
&lt;h2 id="headline-5">
Other macros
&lt;/h2>
&lt;div id="outline-text-headline-5" class="outline-text-2">
&lt;p>
&lt;code>-&amp;gt;&lt;/code>, &lt;code>some-&amp;gt;&lt;/code>, and &lt;code>cond-&amp;gt;&lt;/code> each have a matching macro, &lt;code>-&amp;gt;&amp;gt;&lt;/code>, &lt;code>some-&amp;gt;&amp;gt;&lt;/code>, and &lt;code>cond-&amp;gt;&amp;gt;&lt;/code>, which inserts the threaded value as the last argument in each form. I don&amp;#39;t find them often to be of much use.&lt;/p>
&lt;p>
You can see Clojure&amp;#39;s official guide on the subject &lt;a href="https://clojure.org/guides/threading_macros">here&lt;/a>.&lt;/p>
&lt;/div>
&lt;/div>
&lt;div class="footnotes">
&lt;hr class="footnotes-separatator">
&lt;div class="footnote-definitions">
&lt;div class="footnote-definition">
&lt;sup id="footnote-1">&lt;a href="#footnote-reference-1">1&lt;/a>&lt;/sup>
&lt;div class="footnote-body">
&lt;p>&amp;#34;It is better to have 100 functions operate on one data structure than to have 10 functions operate on 10 data structures.&amp;#34; — Alan Perlis, &lt;em>Epigrams on Programming&lt;/em>&lt;/p>
&lt;/div>
&lt;/div>
&lt;div class="footnote-definition">
&lt;sup id="footnote-2">&lt;a href="#footnote-reference-2">2&lt;/a>&lt;/sup>
&lt;div class="footnote-body">
&lt;p>&lt;a href="https://youtu.be/ROor6_NGIWU?t=1592">The Language of the System&lt;/a> by Rich Hickey, Conj 2012. Having abandoned object-oriented languages, don&amp;#39;t recreate them in the large by building a system of components that look like objects. Instead, choose to structure your system like you structure your functional programmes, pipelines of functions.&lt;/p>
&lt;/div>
&lt;/div>
&lt;div class="footnote-definition">
&lt;sup id="footnote-3">&lt;a href="#footnote-reference-3">3&lt;/a>&lt;/sup>
&lt;div class="footnote-body">
&lt;p>The major exceptions being Arabic, Hebrew, and Urdu.&lt;/p>
&lt;/div>
&lt;/div>
&lt;div class="footnote-definition">
&lt;sup id="footnote-4">&lt;a href="#footnote-reference-4">4&lt;/a>&lt;/sup>
&lt;div class="footnote-body">
&lt;p>&lt;a href="https://en.wikipedia.org/wiki/Chiasmus">https://en.wikipedia.org/wiki/Chiasmus&lt;/a>&lt;/p>
&lt;/div>
&lt;/div>
&lt;div class="footnote-definition">
&lt;sup id="footnote-5">&lt;a href="#footnote-reference-5">5&lt;/a>&lt;/sup>
&lt;div class="footnote-body">
&lt;div class="src src-java">
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">public&lt;/span> &lt;span class="n">EnterpriseIntegratorBuilder&lt;/span> &lt;span class="nf">setCredentials&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">Credentials&lt;/span> &lt;span class="n">creds&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">username&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">creds&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getUsername&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">password&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">creds&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getPassword&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="footnote-definition">
&lt;sup id="footnote-6">&lt;a href="#footnote-reference-6">6&lt;/a>&lt;/sup>
&lt;div class="footnote-body">
&lt;div class="src src-java">
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">public&lt;/span> &lt;span class="n">EnterpriseIntegratorBuilder&lt;/span> &lt;span class="nf">setTimeoutMillis&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">to&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">to&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">0&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">timeoutMillis&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">to&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span> &lt;span class="c1">// else one can use the default value or throw an exception
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div></description></item><item><title>An 8-year-old Clojure bug, resorting to Java</title><link>http://blog.almost.education/posts/clojure-java-bug/</link><pubDate>Wed, 01 Dec 2021 15:26:12 +0000</pubDate><guid>http://blog.almost.education/posts/clojure-java-bug/</guid><description>
&lt;p>
I&amp;#39;ve been writing &lt;a href="https://github.com/EducatedAlmost/eventstore.clj.git">ae/eventstore.clj&lt;/a>, a Clojure wrapper for the &lt;a href="https://github.com/EventStore/EventStoreDB-Client-Java">EventStoreDB-Client-Java&lt;/a> library. Nicely written, it is still &amp;gt;5k lines of your typical verbose Java and I&amp;#39;m hoping I can do more in &amp;lt;1k lines. In writing this I have stumbled upon an 8-year-old Clojure bug, which itself might stem from a JVM bug from the last millennium.&lt;/p>
&lt;div id="outline-container-headline-1" class="outline-2">
&lt;h2 id="headline-1">
Finding a Clojure–Java interop bug
&lt;/h2>
&lt;div id="outline-text-headline-1" class="outline-text-2">
&lt;p>
I loath private, protected, and their ilk, much preferring to make everything public 99% of the time. Power to the consumer! Here&amp;#39;s an (&lt;em>abbreviated&lt;/em>) example from the Java library. A protected base class which provided the subclass with a public method.&lt;/p>
&lt;div class="src src-java">
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">protected&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">OptionsBase&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">T&lt;/span> &lt;span class="nf">timeouts&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">Timeouts&lt;/span> &lt;span class="n">timeouts&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">timeouts&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">timeouts&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">ReadAllOptions&lt;/span> &lt;span class="kd">extends&lt;/span> &lt;span class="n">OptionsBase&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">ReadAllOptions&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="n">ReadAllOptions&lt;/span> &lt;span class="nf">get&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">ReadAllOptions&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>
In Java, this is perfectly legal. In Clojure:&lt;/p>
&lt;div class="src src-clojure">
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-clojure" data-lang="clojure">&lt;span class="p">(&lt;/span>&lt;span class="nb">-&amp;gt; &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">ReadAllOptions/get&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="nf">.timeouts&lt;/span> &lt;span class="nv">timeouts&lt;/span>&lt;span class="p">))&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="src src-text">
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">Error in -&amp;gt;ReadAllOptions-test
Uncaught exception, not in assertion
error: java.lang.IllegalArgumentException: No matching method timeouts found taking 1 args for class com.eventstore.dbclient.ReadAllOptions&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>
I get exceptions like this all the time working with Clojure–Java interop, either I&amp;#39;ve:&lt;/p>
&lt;ul>
&lt;li>called the right method on the wrong class&lt;/li>
&lt;li>called the wrong method on the right class&lt;/li>
&lt;li>called an inaccessible method&lt;/li>
&lt;/ul>
&lt;p>Let&amp;#39;s find out which methods &lt;code>ReadAllOptions&lt;/code> provides:&lt;/p>
&lt;div class="src src-clojure">
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-clojure" data-lang="clojure">&lt;span class="p">(&lt;/span>&lt;span class="nf">-&amp;gt;&amp;gt;&lt;/span> &lt;span class="nv">ReadAllOptions&lt;/span>
&lt;span class="nv">.getMethods&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="nb">map &lt;/span>&lt;span class="nv">str&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="c1">; =&amp;gt; ...&lt;/span>
&lt;span class="c1">; 17. &amp;#34;public java.lang.Object com.eventstore.dbclient.OptionsBase.requiresLeader()&amp;#34;&lt;/span>
&lt;span class="c1">; 18. &amp;#34;public java.lang.Object com.eventstore.dbclient.OptionsBase.requiresLeader(boolean)&amp;#34;&lt;/span>
&lt;span class="c1">; 19. &amp;#34;public java.lang.Object com.eventstore.dbclient.OptionsBase.timeouts(com.eventstore.dbclient.Timeouts)&amp;#34;&lt;/span>
&lt;span class="c1">; 20. &amp;#34;public java.lang.Object com.eventstore.dbclient.OptionsBase.notRequireLeader()&amp;#34;&lt;/span>
&lt;span class="c1">; 21. &amp;#34;public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException&amp;#34;&lt;/span>
&lt;span class="c1">; ...&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>
Look at #19, it has a public method called timeouts, and after checking &lt;code>(.getClass timeout)&lt;/code> we can be sure that this call should work.&lt;/p>
&lt;p>
It turns out that this is a bug that goes back to at least 2013, when it was first tracked in the Clojure Jira (&lt;a href="https://clojure.atlassian.net/browse/CLJ-1243">#CLJ–1243&lt;/a>) and I suspect it might be related to a 22-year-old JVM bug (&lt;a href="https://bugs.java.com/bugdatabase/view_bug.do?bug_id=4283544">#JDK–4283544&lt;/a>).&lt;/p>
&lt;p>
Well, what to do? I don&amp;#39;t think there&amp;#39;s much use in waiting for this to get fixed. Let&amp;#39;s do as hackers do and hack. Given that I&amp;#39;m fairly certain that what I want to do is legal in Java, let&amp;#39;s look at the Java interop options of which there are three levels:&lt;/p>
&lt;ol>
&lt;li>class / member accesses and the dot special form&lt;/li>
&lt;li>&lt;code>proxy&lt;/code>, &lt;a href="#gen-class">&lt;code>gen-class&lt;/code>&lt;/a>, &lt;code>reify&lt;/code>&lt;/li>
&lt;li>writing Java&lt;/li>
&lt;/ol>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-2" class="outline-2">
&lt;h2 id="headline-2">
Writing Java
&lt;/h2>
&lt;div id="outline-text-headline-2" class="outline-text-2">
&lt;p>
In this rare case, it looks like writing Java is ones only option. But I, like many other Clojure developers, was once a Java developer, and the Java needed is very simple, it is a wrapper for &lt;code>ReadAllOptions&lt;/code>, so the offending methods will be called inside our Java code.&lt;/p>
&lt;div class="src src-java">
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kn">import&lt;/span> &lt;span class="nn">com.eventstore.dbclient.ReadAllOptions&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">com.eventstore.dbclient.Timeouts&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">ReadAllOptionsClj&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">ReadAllOptions&lt;/span> &lt;span class="n">foreign&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="nf">ReadAllOptionsClj&lt;/span> &lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">foreign&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">ReadAllOptions&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">get&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">ReadAllOptionsClj&lt;/span> &lt;span class="nf">timeouts&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">Timeouts&lt;/span> &lt;span class="n">timeouts&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">foreign&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">timeouts&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">timeouts&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">ReadAllOptions&lt;/span> &lt;span class="nf">build&lt;/span> &lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">foreign&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>
I&amp;#39;ve used a builder pattern here. This is good to call using Clojure&amp;#39;s &lt;code>cond-&amp;gt;&lt;/code> threading macro. It works by evaluating a predicate, and treating the next as if in a normal thread-first macro. In the following code this makes sure that methods are only called if the argument is non-nil, the builder&amp;#39;s default value is used otherwise.&lt;/p>
&lt;div class="src src-clojure">
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-clojure" data-lang="clojure">&lt;span class="p">(&lt;/span>&lt;span class="nf">cond-&amp;gt;&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">new &lt;/span>&lt;span class="nv">ReadAllOptionsClj&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="nf">some?&lt;/span> &lt;span class="nv">timeouts&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nf">.timeouts&lt;/span> &lt;span class="nv">timeouts&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1">;; add many other fields to the builder&lt;/span>
&lt;span class="c1">;; (some? host) (.addHost host)&lt;/span>
&lt;span class="nv">true&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nf">.build&lt;/span>&lt;span class="p">))&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>
As always when calling Java from Clojure, one must import the class:&lt;/p>
&lt;div class="src src-clojure">
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-clojure" data-lang="clojure">&lt;span class="p">(&lt;/span>&lt;span class="kd">ns &lt;/span>&lt;span class="nv">...&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="ss">:require&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="nv">...&lt;/span>&lt;span class="p">])&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="ss">:import&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="nv">ae.eventstore.j&lt;/span> &lt;span class="nv">ReadAllOptionsClj&lt;/span>&lt;span class="p">]))&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>
But before it can be used, the Java needs to be compiled.&lt;/p>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-3" class="outline-2">
&lt;h2 id="headline-3">
Compiling Java with tools.build
&lt;/h2>
&lt;div id="outline-text-headline-3" class="outline-text-2">
&lt;p>
Building this in Leiningen should be &lt;a href="https://cljdoc.org/d/leiningen/leiningen/2.9.8/doc/polyglot-clojure-java-projects-with-leiningen">really simple&lt;/a>. Lein&amp;#39;s &lt;code>defproject&lt;/code> has the key &lt;code>:java-source-paths&lt;/code> which can be compiled using &lt;code>lein javac&lt;/code>, but this is usually unnecessary as all the usual Lein tasks will do it for you.&lt;/p>
&lt;p>
I made the switch to &lt;code>deps.edn&lt;/code> last year, unfortunately it won&amp;#39;t do compile Java code automatically. But this does provide one with an opportunity to learn how to use &lt;a href="https://github.com/clojure/tools.build">&lt;code>tools.build&lt;/code>&lt;/a>, written by Alex Miller (@puredanger). Asserting that &lt;em>builds are programs&lt;/em>, we must do for ourselves what Lein would be doing.&lt;/p>
&lt;p>
To &lt;code>deps.edn&lt;/code> one must add an alias for the task to be performed, add any dependencies needed for that task, and the namespace containing the functions to use. Our tasks will be &lt;code>build&lt;/code>, our only dependency &lt;code>tools.build&lt;/code>, and our namespace &lt;code>build&lt;/code>.&lt;/p>
&lt;div class="src src-clojure">
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-clojure" data-lang="clojure">&lt;span class="p">{&lt;/span>&lt;span class="ss">:alias&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="ss">:build&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="nv">io.github.clojure/tools.build&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="ss">:git/tag&lt;/span> &lt;span class="s">&amp;#34;v0.6.8&amp;#34;&lt;/span> &lt;span class="ss">:git/sha&lt;/span> &lt;span class="s">&amp;#34;d79ae84&amp;#34;&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="ss">:ns-default&lt;/span> &lt;span class="nv">build&lt;/span>&lt;span class="p">}}}&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>
One then creates &lt;code>build.clj&lt;/code> in the project&amp;#39;s root where we will start defining our build task:&lt;/p>
&lt;div class="src src-clojure">
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-clojure" data-lang="clojure">&lt;span class="p">(&lt;/span>&lt;span class="kd">ns &lt;/span>&lt;span class="nv">build&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="ss">:require&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="nv">clojure.tools.build.api&lt;/span> &lt;span class="ss">:as&lt;/span> &lt;span class="nv">b&lt;/span>&lt;span class="p">]))&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>
The most important subtask will be compiling our Java code, for which &lt;code>tools.build&lt;/code> provides the &lt;code>javac&lt;/code> function.&lt;/p>
&lt;div class="src src-clojure">
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-clojure" data-lang="clojure">&lt;span class="p">(&lt;/span>&lt;span class="k">def &lt;/span>&lt;span class="nv">class-dir&lt;/span> &lt;span class="s">&amp;#34;target/classes&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="k">def &lt;/span>&lt;span class="nv">basis&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nf">b/create-basis&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="ss">:project&lt;/span> &lt;span class="s">&amp;#34;deps.edn&amp;#34;&lt;/span>&lt;span class="p">}))&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="kd">defn &lt;/span>&lt;span class="nv">compile&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="nv">_&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="nf">b/javac&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="ss">:src-dirs&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s">&amp;#34;java&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="ss">:class-dir&lt;/span> &lt;span class="nv">class-dir&lt;/span>
&lt;span class="ss">:basis&lt;/span> &lt;span class="nv">basis&lt;/span>
&lt;span class="ss">:javac-opts&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s">&amp;#34;-source&amp;#34;&lt;/span> &lt;span class="s">&amp;#34;8&amp;#34;&lt;/span> &lt;span class="s">&amp;#34;-target&amp;#34;&lt;/span> &lt;span class="s">&amp;#34;8&amp;#34;&lt;/span>&lt;span class="p">]}))&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>
I assume here that the Java code is within &lt;code>java&lt;/code> but it might be possible to keep it as a subdirectory or &lt;code>src&lt;/code> as one would with &lt;code>clj&lt;/code>, &lt;code>cljc&lt;/code>, and &lt;code>cljs&lt;/code>.&lt;/p>
&lt;p>
Running &lt;code>clojure -T:build compile&lt;/code> will compile the Java source files as can be seen by looking in &lt;code>target/classes&lt;/code>. Once &lt;code>target/classes&lt;/code> is added to the classpath you will be ready to call the class from Clojure.&lt;/p>
&lt;div class="src src-clojure">
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-clojure" data-lang="clojure">&lt;span class="p">{&lt;/span>&lt;span class="ss">:paths&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s">&amp;#34;src&amp;#34;&lt;/span> &lt;span class="s">&amp;#34;resources&amp;#34;&lt;/span> &lt;span class="s">&amp;#34;target/classes&amp;#34;&lt;/span>&lt;span class="p">]}&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-gen-class" class="outline-2">
&lt;h2 id="gen-class">
Trying &lt;code>gen-class&lt;/code>?
&lt;/h2>
&lt;div id="outline-text-gen-class" class="outline-text-2">
&lt;p>
In attempting to use &lt;code>gen-class&lt;/code> to circumvent this bug, I found an even older Clojure bug! Using the builder pattern, the builder&amp;#39;s methods return itself. This allows one to use method chaining in Java, or threading macros in Clojure.&lt;/p>
&lt;div class="src src-java">
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="n">Foo&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">newBuilder&lt;/span>&lt;span class="o">()&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">red&lt;/span>&lt;span class="o">()&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">mirrored&lt;/span>&lt;span class="o">()&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">short&lt;/span>&lt;span class="o">()&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">wearing&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">jacket&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="o">.&lt;/span>&lt;span class="na">build&lt;/span>&lt;span class="o">()&lt;/span>
&lt;span class="c1">// =&amp;gt; an instance of Foo
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div class="src src-clojure">
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-clojure" data-lang="clojure">&lt;span class="p">(&lt;/span>&lt;span class="nb">-&amp;gt; &lt;/span>&lt;span class="nv">Foo&lt;/span>
&lt;span class="nv">.newBuilder&lt;/span>
&lt;span class="nv">.red&lt;/span>
&lt;span class="nv">.mirrored&lt;/span>
&lt;span class="nv">.short&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="nf">.wearing&lt;/span> &lt;span class="nv">jacket&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="nv">.build&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1">;; =&amp;gt; an instance of Foo&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>
One would write the method like so, so the function makes the change to the internal state, and then returns itself.&lt;/p>
&lt;div class="src src-clojure">
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-clojure" data-lang="clojure">&lt;span class="p">(&lt;/span>&lt;span class="nf">gen-class&lt;/span> &lt;span class="ss">:name&lt;/span> &lt;span class="s">&amp;#34;ae.ReadAllOptionsBuilder&amp;#34;&lt;/span>
&lt;span class="ss">:methods&lt;/span> &lt;span class="p">[[&lt;/span>&lt;span class="nv">timeouts&lt;/span>
&lt;span class="p">[&lt;/span>&lt;span class="nv">com.eventstore.dbclient.Timeouts&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="nv">ae.ReadAllOptionsBuilder&lt;/span>&lt;span class="p">]])&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="kd">defn &lt;/span>&lt;span class="nv">-timeouts&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="nv">this&lt;/span> &lt;span class="nv">timeouts&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="nb">-&amp;gt; &lt;/span>&lt;span class="nv">this&lt;/span> &lt;span class="nv">.state&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nf">.timeouts&lt;/span> &lt;span class="nv">timeouts&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="nv">this&lt;/span>&lt;span class="p">)&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>
If it only were so. Ticket &lt;a href="https://clojure.atlassian.net/browse/CLJ-84">#CLJ-84&lt;/a>, &lt;em>compile gen-class fail when class returns self&lt;/em>, makes it clear that it is not possible for a &lt;code>gen-class&lt;/code> method to return an instance of the same class. Created on 17th June 2009 by Rick Hickey, this ticket is as old as Clojure&amp;#39;s ticketing system itself. What happens if we return &lt;code>void&lt;/code> instead?&lt;/p>
&lt;div class="src src-clojure">
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-clojure" data-lang="clojure">&lt;span class="p">(&lt;/span>&lt;span class="kd">ns &lt;/span>&lt;span class="nv">ae.read-all-options&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="ss">:import&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="nv">com.eventstore.dbclient&lt;/span>
&lt;span class="nv">Direction&lt;/span>
&lt;span class="nv">Position&lt;/span>
&lt;span class="nv">ReadAllOptions&lt;/span>
&lt;span class="nv">Timeouts&lt;/span>
&lt;span class="nv">UserCredentials&lt;/span>&lt;span class="p">]))&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="nf">gen-class&lt;/span>
&lt;span class="ss">:name&lt;/span> &lt;span class="s">&amp;#34;ae.eventstore.ReadAllOptionsCljTwo&amp;#34;&lt;/span>
&lt;span class="ss">:state&lt;/span> &lt;span class="nv">state&lt;/span>
&lt;span class="ss">:init&lt;/span> &lt;span class="nv">init&lt;/span>
&lt;span class="ss">:constructors&lt;/span> &lt;span class="p">{[]&lt;/span> &lt;span class="p">[]}&lt;/span>
&lt;span class="ss">:methods&lt;/span> &lt;span class="p">[[&lt;/span>&lt;span class="nv">getForeign&lt;/span> &lt;span class="p">[]&lt;/span> &lt;span class="nv">com.eventstore.dbclient.ReadAllOptions&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="p">[&lt;/span>&lt;span class="nv">authenticated&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="nv">com.eventstore.dbclient.UserCredentials&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="nv">void&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="p">[&lt;/span>&lt;span class="nv">requiresLeader&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="nv">boolean&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="nv">void&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="p">[&lt;/span>&lt;span class="nv">timeouts&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="nv">com.eventstore.dbclient.Timeouts&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="nv">void&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="p">[&lt;/span>&lt;span class="nv">resolveLinkTos&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="nv">boolean&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="nv">void&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="p">[&lt;/span>&lt;span class="nv">fromPosition&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="nv">com.eventstore.dbclient.Position&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="nv">void&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="p">[&lt;/span>&lt;span class="nv">direction&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="nv">com.eventstore.dbclient.Direction&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="nv">void&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="p">[&lt;/span>&lt;span class="nv">build&lt;/span> &lt;span class="p">[]&lt;/span> &lt;span class="nv">com.eventstore.dbclient.ReadAllOptions&lt;/span>&lt;span class="p">]])&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="kd">defn &lt;/span>&lt;span class="nv">-init&lt;/span> &lt;span class="p">[]&lt;/span>
&lt;span class="p">[[]&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nf">ReadAllOptions/get&lt;/span>&lt;span class="p">)])&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="kd">defn &lt;/span>&lt;span class="nv">-getForeign&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="nv">this&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="nf">.state&lt;/span> &lt;span class="nv">this&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="kd">defn &lt;/span>&lt;span class="nv">-authenticated&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="nv">this&lt;/span> &lt;span class="nv">credentials&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="nb">-&amp;gt; &lt;/span>&lt;span class="nv">this&lt;/span> &lt;span class="nv">.state&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nf">.authenticated&lt;/span> &lt;span class="nv">credentials&lt;/span>&lt;span class="p">)))&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="kd">defn &lt;/span>&lt;span class="nv">-requiresLeader&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="nv">this&lt;/span> &lt;span class="nv">value&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="nb">-&amp;gt; &lt;/span>&lt;span class="nv">this&lt;/span> &lt;span class="nv">.state&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nf">.requiresLeader&lt;/span> &lt;span class="nv">value&lt;/span>&lt;span class="p">)))&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="kd">defn &lt;/span>&lt;span class="nv">-timeouts&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="nv">this&lt;/span> &lt;span class="nv">timeouts&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="nb">-&amp;gt; &lt;/span>&lt;span class="nv">this&lt;/span> &lt;span class="nv">.state&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nf">.timeouts&lt;/span> &lt;span class="nv">timeouts&lt;/span>&lt;span class="p">)))&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>
Given that the methods are returning void, we have to use an abomination like this with an implicit &lt;code>do&lt;/code> and explicit altering of state:&lt;/p>
&lt;div class="src src-clojure">
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-clojure" data-lang="clojure">&lt;span class="p">(&lt;/span>&lt;span class="kd">defn &lt;/span>&lt;span class="nv">apply-base-options&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="nv">builder&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="ss">::options/keys&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="nv">timeouts&lt;/span> &lt;span class="nv">requires-leader?&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="ss">::keys&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="nv">credentials&lt;/span>&lt;span class="p">]}]&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="k">if &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">some?&lt;/span> &lt;span class="nv">timeouts&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nf">.timeouts&lt;/span> &lt;span class="nv">builder&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nf">-&amp;gt;Timeouts&lt;/span> &lt;span class="nv">timeouts&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="nv">nil&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="k">if &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">some?&lt;/span> &lt;span class="nv">requires-leader?&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nf">.requiresLeader&lt;/span> &lt;span class="nv">builder&lt;/span> &lt;span class="nv">requires-leader?&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nv">nil&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="k">if &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">some?&lt;/span> &lt;span class="nv">credentials&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nf">.authenticated&lt;/span> &lt;span class="nv">builder&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nf">-&amp;gt;UserCredentials&lt;/span> &lt;span class="nv">credentials&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="nv">nil&lt;/span>&lt;span class="p">))&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>
And AOT compile to make use of &lt;code>gen-class&lt;/code> by adding a new subtask to &lt;code>build.clj&lt;/code>:&lt;/p>
&lt;div class="src src-clojure">
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-clojure" data-lang="clojure">&lt;span class="p">(&lt;/span>&lt;span class="kd">defn &lt;/span>&lt;span class="nv">compile-2&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="nv">_&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="nf">compile&lt;/span> &lt;span class="nv">nil&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">;; only needed if you haven&amp;#39;t removed the Java code&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="nf">b/compile-clj&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="ss">:basis&lt;/span> &lt;span class="nv">basis&lt;/span>
&lt;span class="ss">:src-dirs&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s">&amp;#34;src&amp;#34;&lt;/span>&lt;span class="p">]&lt;/span>
&lt;span class="ss">:class-dir&lt;/span> &lt;span class="nv">class-dir&lt;/span>&lt;span class="p">}))&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>
And the best thing? It doesn&amp;#39;t even work.&lt;/p>
&lt;div class="src src-clojure">
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-clojure" data-lang="clojure">&lt;span class="nv">java.lang.IllegalArgumentException&lt;/span>&lt;span class="err">:&lt;/span> &lt;span class="nv">No&lt;/span> &lt;span class="nv">matching&lt;/span> &lt;span class="nv">method&lt;/span> &lt;span class="nv">timeouts&lt;/span> &lt;span class="nv">found&lt;/span> &lt;span class="nv">taking&lt;/span> &lt;span class="mi">1&lt;/span> &lt;span class="nv">args&lt;/span> &lt;span class="nb">for class &lt;/span>&lt;span class="nv">com.eventstore.dbclient.ReadAllOptions&lt;/span>
&lt;span class="nv">No&lt;/span> &lt;span class="nv">matching&lt;/span> &lt;span class="nv">method&lt;/span> &lt;span class="nv">timeouts&lt;/span> &lt;span class="nv">found&lt;/span> &lt;span class="nv">taking&lt;/span> &lt;span class="mi">1&lt;/span> &lt;span class="nv">args&lt;/span> &lt;span class="nb">for &lt;/span>&lt;span class="nv">class&lt;/span>
&lt;span class="nv">com.eventstore.dbclient.ReadAllOptions&lt;/span>
&lt;span class="nv">Reflector.java&lt;/span>&lt;span class="err">:&lt;/span> &lt;span class="mi">127&lt;/span> &lt;span class="nv">clojure.lang.Reflector/invokeMatchingMethod&lt;/span>
&lt;span class="nv">Reflector.java&lt;/span>&lt;span class="err">:&lt;/span> &lt;span class="mi">102&lt;/span> &lt;span class="nv">clojure.lang.Reflector/invokeInstanceMethod&lt;/span>
&lt;span class="nv">read_all_options.clj&lt;/span>&lt;span class="err">:&lt;/span> &lt;span class="mi">36&lt;/span> &lt;span class="nv">ae.read-all-options/-timeouts&lt;/span>
&lt;span class="nv">read_all_options.clj&lt;/span>&lt;span class="err">:&lt;/span> &lt;span class="mi">35&lt;/span> &lt;span class="nv">ae.read-all-options/-timeouts&lt;/span>
&lt;span class="nv">nil&lt;/span>&lt;span class="err">:&lt;/span> &lt;span class="mi">-1&lt;/span> &lt;span class="nv">ae.eventstore.ReadAllOptionsCljTwo/timeouts&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-5" class="outline-2">
&lt;h2 id="headline-5">
Other uses
&lt;/h2>
&lt;div id="outline-text-headline-5" class="outline-text-2">
&lt;p>
I can&amp;#39;t imagine that such a setup will be useful too often, but here are a couple that come to mind:&lt;/p>
&lt;ul>
&lt;li>Java is more performant (~2×?)&lt;/li>
&lt;li>an existing codebase migrating to Clojure (à la &lt;a href="https://www.redhat.com/architect/pros-and-cons-strangler-architecture-pattern">strangler architecture&lt;/a>)&lt;/li>
&lt;li>providing a reliable Java API&lt;/li>
&lt;li>using tools that require Java magic&lt;/li>
&lt;/ul>
&lt;/div>
&lt;/div></description></item><item><title>æ/alias+ns</title><link>http://blog.almost.education/posts/alias-ns/</link><pubDate>Wed, 24 Nov 2021 13:30:06 +0000</pubDate><guid>http://blog.almost.education/posts/alias-ns/</guid><description>&lt;p>
&lt;em>Macros that makes namespace aliases easy.&lt;/em>&lt;/p>
&lt;p>
&lt;a href="https://github.com/EducatedAlmost/alias-ns.git">https://github.com/EducatedAlmost/alias-ns.git&lt;/a>&lt;/p>
&lt;p>
Qualified keywords have ballooned in popularity since the release of spec with Clojure 1.9. And thankfully so! A creed amongst Clojurians is that maps should be open to modification, meaning that I should be able to add data to a map without worrying that it will break its consumer, and that when processing maps we shouldn&amp;#39;t remove data using something like &lt;code>select-keys&lt;/code> without good reason.&lt;/p>
&lt;p>
But there was a problem that occasionally &lt;code>(assoc m k v)&lt;/code> would be destructive — because we were all using the same keys. Every application seemingly has its own &lt;code>:id&lt;/code>, &lt;code>:user&lt;/code>, &lt;code>:service&lt;/code>, &lt;code>:credentials&lt;/code>; and associng a new one would dissoc the previous and break whoever was waiting to consume it. With the introduction of qualified keywords, I can instead assoc &lt;code>:ae.bespoke/id&lt;/code> without fear.&lt;/p>
&lt;p>
Qualified, sometimes called namespaced, keywords abound in my code. For larger projects there might be up to ten namespaces to which a keyword belongs, think: &lt;code>:ae.bespoke.user/id&lt;/code>, &lt;code>:ae.bespoke.item/id&lt;/code>, &lt;code>:ae.bespoke.process/id&lt;/code>. And Clojure allows us to use aliases, most commonly defined within &lt;code>(ns ... (:require [ae.bespoke.user :as user]))&lt;/code>, so the keywords can be shrunk to just &lt;code>::user/id&lt;/code>.&lt;/p>
&lt;p>
I only very occasionally have a problem with this, here&amp;#39;s an example. You start developing your application in &lt;code>ae.bespoke.core&lt;/code>, but decide to split user functionality into &lt;code>ae.bespoke.user&lt;/code>. This works well until you want to reference a user&amp;#39;s id in &lt;code>core&lt;/code>, and try &lt;code>::user/id&lt;/code> as you do in many of your other source files. It fails because &lt;code>core&lt;/code> doesn&amp;#39;t require &lt;code>user&lt;/code>, and if it did you would have a circular dependency because &lt;code>user&lt;/code> itself requires &lt;code>core&lt;/code>.&lt;/p>
&lt;p>
What are the alternatives? Use &lt;code>:ae.bespoke.user/id&lt;/code> instead of &lt;code>::user/id&lt;/code>. This is what I would recommend most of the time, but it has the principal drawback that when referencing this key throughout our code we must always be thinking about whether the current namespace depends upon the user namespace.&lt;/p>
&lt;p>
To aleviate this aspect of cognitive load, I have created &lt;code>alias+ns&lt;/code>. It&amp;#39;s a macro that allows one to alias a namespace that has not been required in the current namespace. So in &lt;code>ae.bespoke.user&lt;/code>, this would be valid:&lt;/p>
&lt;div class="src src-clojure">
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-clojure" data-lang="clojure">&lt;span class="p">(&lt;/span>&lt;span class="nf">alias+ns&lt;/span> &lt;span class="ss">&amp;#39;user&lt;/span> &lt;span class="ss">&amp;#39;ae.bespoke.user&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">{&lt;/span>&lt;span class="ss">::user/id&lt;/span> &lt;span class="mi">356&lt;/span>&lt;span class="p">}&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>
And if using many aliases, use &lt;code>aliases+ns&lt;/code>:&lt;/p>
&lt;div class="src src-clojure">
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-clojure" data-lang="clojure">&lt;span class="p">(&lt;/span>&lt;span class="nf">aliases+ns&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="ss">&amp;#39;user&lt;/span> &lt;span class="ss">&amp;#39;ae.bespoke.user&lt;/span>
&lt;span class="ss">&amp;#39;item&lt;/span> &lt;span class="ss">&amp;#39;ae.bespoke.item&lt;/span>
&lt;span class="ss">&amp;#39;process&lt;/span> &lt;span class="ss">&amp;#39;ae.bespoke.process&lt;/span>&lt;span class="p">})&lt;/span>
&lt;span class="p">{&lt;/span>&lt;span class="ss">::user/id&lt;/span> &lt;span class="mi">356&lt;/span>
&lt;span class="ss">::item/id&lt;/span> &lt;span class="mi">9134&lt;/span>
&lt;span class="ss">::process/id&lt;/span> &lt;span class="mi">22&lt;/span>&lt;span class="p">}&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>
You can do all this without the worry of circular dependencies. Just don&amp;#39;t try to define functions or variables in the aliased namespace, or maybe do but I haven&amp;#39;t a clue what would happen.&lt;/p>
&lt;p>
I won&amp;#39;t be arrogant and claim that this is the best thing to do in all cases, or even that it is best in most cases; but I have found it to be very useful in projects with large numbers of namespaces, where it also reduces the pain of refactoring when code moves between them. I hope you find a use for it too.&lt;/p></description></item><item><title>æ/Rashomon</title><link>http://blog.almost.education/posts/rashomon/</link><pubDate>Fri, 19 Nov 2021 00:00:00 +0000</pubDate><guid>http://blog.almost.education/posts/rashomon/</guid><description>&lt;p>
&lt;em>Clojure functions that build datastructures from events with dynamic perspectives.&lt;/em>&lt;/p>
&lt;p>
&lt;em>Rashomon&lt;/em> is a 1950 psychological thriller film directed by Akira Kurosawa. Based on Ryunosuke Akutagawa&amp;#39;s &lt;em>In A Grove&lt;/em>, it tells the story of a samurai&amp;#39;s death from the perspectives of: the bandit who killed him, his wife, the samurai himself, and finally a woodcutter, none of whom can agree at the subsequent trial.&lt;/p>
&lt;p>
It was the first Japanese film to receive international acclaim, doing so after being panned by Japanese critics. From the film came the term &lt;em>Rashomon effect&lt;/em>, used to describe the situation in which an event is given differing or contradictory interpretations by different observers.&lt;/p>
&lt;p>
I was inspired by the film when writing &lt;a href="https://github.com/EducatedAlmost/rashomon">Rashomon&lt;/a>, a library for Clojure which rebuilds datastructures from events, with emphasis placed on the flexibility of &lt;em>perspectives&lt;/em>, the functions that act for each event. In homage to its eponym it uses &lt;em>testimony&lt;/em> to refer to the datastructure being constructed.&lt;/p>
&lt;div class="src src-clojure">
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-clojure" data-lang="clojure">&lt;span class="p">(&lt;/span>&lt;span class="k">def &lt;/span>&lt;span class="nv">bandit-perspectives&lt;/span>
&lt;span class="p">{&lt;/span>&lt;span class="ss">:ae.rashomon.event.type/foo&lt;/span>
, &lt;span class="p">(&lt;/span>&lt;span class="k">fn &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nv">testimony&lt;/span> &lt;span class="nv">event&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nb">assoc &lt;/span>&lt;span class="nv">testimony&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="ss">:guilt?&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nb">not &lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="ss">:qux&lt;/span> &lt;span class="nv">event&lt;/span>&lt;span class="p">))}))})&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="k">def &lt;/span>&lt;span class="nv">samurai-perspectives&lt;/span>
&lt;span class="p">{&lt;/span>&lt;span class="ss">:ae.rashomon.event.type/foo&lt;/span>
, &lt;span class="p">(&lt;/span>&lt;span class="k">fn &lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nv">testimony&lt;/span> &lt;span class="nv">event&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nb">assoc &lt;/span>&lt;span class="nv">testimony&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="ss">:guilt?&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="ss">:qux&lt;/span> &lt;span class="nv">event&lt;/span>&lt;span class="p">)}))})&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="nf">rashomon/apply-event&lt;/span>
&lt;span class="nv">testimony&lt;/span>
&lt;span class="nv">bandit-perspectives&lt;/span>
&lt;span class="p">{&lt;/span>&lt;span class="ss">:ae.rashomon.event/type&lt;/span> &lt;span class="ss">:ae.rashomon.event.type/foo&lt;/span>
&lt;span class="ss">:qux&lt;/span> &lt;span class="ss">:guilty&lt;/span>&lt;span class="p">})&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="nf">rashomon/build&lt;/span> &lt;span class="nv">samurai-perspectives&lt;/span> &lt;span class="nv">events&lt;/span>&lt;span class="p">)&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>
By changing the set of perspectives we use when applying the event, the testimony we produce can be completely different. This functionality makes it incredibly easy to change our interpretation of events, do A/B testing where different users have different interpretations, read perspectives from configuration.&lt;/p>
&lt;p>
I think this is quite novel and I&amp;#39;m excited to see what you can create with it.&lt;/p></description></item><item><title>Correlation and causation IDs</title><link>http://blog.almost.education/posts/corr-caus-ids/</link><pubDate>Thu, 18 Nov 2021 00:00:00 +0000</pubDate><guid>http://blog.almost.education/posts/corr-caus-ids/</guid><description>&lt;p>
This is a very useful pattern that I see rarely used. When working with systems that pass messages, it can be difficult to later reconstruct a conversation or the sequence of events. It is second nature to us to assign entity IDs&lt;sup class="footnote-reference">&lt;a id="footnote-reference-1" href="#footnote-1">1&lt;/a>&lt;/sup> to messages, but two other IDs will help us to understand the structure of conversations.&lt;/p>
&lt;p>
One is a &lt;em>correlation ID&lt;/em>. This is used to tie the conversation together. When initiating a conversation a correlation ID is created and any reply simply copies the correlation ID as its own.&lt;/p>
&lt;p>
The other is a &lt;em>causation ID&lt;/em>. This is used to record the immediate cause of the message, or which message this is a reply to. When replying, the original message&amp;#39;s entity ID is copied as the reply&amp;#39;s causation ID.&lt;/p>
&lt;p>
Messages can be anything: commands, entity events, user input, user data, system events.&lt;/p>
&lt;p>
I&amp;#39;ve displayed them in order and used integer IDs instead of UUIDs&lt;sup class="footnote-reference">&lt;a id="footnote-reference-2" href="#footnote-2">2&lt;/a>&lt;/sup> only for readability&amp;#39;s sake. To retrieve the conversation we can query our database for all messages with the correlation ID &lt;code>547&lt;/code>, and sort them into a tree using their entity and causation IDs.&lt;/p>
&lt;div class="src src-clojure">
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-clojure" data-lang="clojure">&lt;span class="p">{&lt;/span>&lt;span class="ss">::id/corr&lt;/span> &lt;span class="mi">547&lt;/span>
&lt;span class="ss">::id/caus&lt;/span> &lt;span class="nv">nil&lt;/span>
&lt;span class="ss">::id/entity&lt;/span> &lt;span class="mi">901&lt;/span>
&lt;span class="ss">::content&lt;/span> &lt;span class="s">&amp;#34;Whose motorcycle is this?&amp;#34;&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="p">{&lt;/span>&lt;span class="ss">::id/corr&lt;/span> &lt;span class="mi">547&lt;/span>
&lt;span class="ss">::id/caus&lt;/span> &lt;span class="mi">901&lt;/span>
&lt;span class="ss">::id/entity&lt;/span> &lt;span class="mi">829&lt;/span>
&lt;span class="ss">::content&lt;/span> &lt;span class="s">&amp;#34;It&amp;#39;s a chopper, baby.&amp;#34;&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="p">{&lt;/span>&lt;span class="ss">::id/corr&lt;/span> &lt;span class="mi">547&lt;/span>
&lt;span class="ss">::id/caus&lt;/span> &lt;span class="mi">829&lt;/span>
&lt;span class="ss">::id/entity&lt;/span> &lt;span class="mi">489&lt;/span>
&lt;span class="ss">::content&lt;/span> &lt;span class="s">&amp;#34;Whose chopper is this?&amp;#34;&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="p">{&lt;/span>&lt;span class="ss">::id/corr&lt;/span> &lt;span class="mi">547&lt;/span>
&lt;span class="ss">::id/caus&lt;/span> &lt;span class="mi">489&lt;/span>
&lt;span class="ss">::id/entity&lt;/span> &lt;span class="mi">122&lt;/span>
&lt;span class="ss">::content&lt;/span> &lt;span class="s">&amp;#34;It&amp;#39;s Zed&amp;#39;s.&amp;#34;&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="p">{&lt;/span>&lt;span class="ss">::id/corr&lt;/span> &lt;span class="mi">547&lt;/span>
&lt;span class="ss">::id/caus&lt;/span> &lt;span class="mi">122&lt;/span>
&lt;span class="ss">::id/entity&lt;/span> &lt;span class="mi">004&lt;/span>
&lt;span class="ss">::content&lt;/span> &lt;span class="s">&amp;#34;Who&amp;#39;s Zed?&amp;#34;&lt;/span>&lt;span class="p">}&lt;/span>
&lt;span class="p">{&lt;/span>&lt;span class="ss">::id/corr&lt;/span> &lt;span class="mi">547&lt;/span>
&lt;span class="ss">::id/caus&lt;/span> &lt;span class="mi">004&lt;/span>
&lt;span class="ss">::id/entity&lt;/span> &lt;span class="mi">675&lt;/span>
&lt;span class="ss">::content&lt;/span> &lt;span class="s">&amp;#34;Zed&amp;#39;s dead, baby. Zed&amp;#39;s dead.&amp;#34;&lt;/span>&lt;span class="p">}&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>
This is useful because it allows us to find the causes of downstream issues. In a previous project I worked on, we were consuming data provided by third parties, which would occasionally contain mistakes. If we found that a user of ours had become a multi-billionaire overnight, we could check the causation ID of the responsible event which would direct us to the source file that contained the data.&lt;/p>
&lt;p>
An advanced form of this pattern allows each message to have several correlation and causation IDs. An event&amp;#39;s correlation IDs could point to not just the file that was the source of the data, but also the particular line of the CSV, and the import job. In a risk management service, the warning message can have as its causation IDs all the IDs of the offers that contribute to the risky position.&lt;/p>
&lt;div class="src src-clojure">
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-clojure" data-lang="clojure">&lt;span class="p">{&lt;/span>&lt;span class="ss">::id/correlations&lt;/span>
&lt;span class="p">[&lt;/span>&lt;span class="o">#&lt;/span>&lt;span class="nv">uuid&lt;/span> &lt;span class="s">&amp;#34;15b797d2-7cbd-4295-89da-d2c94e49832a&amp;#34;&lt;/span> &lt;span class="c1">;; the source file&lt;/span>
&lt;span class="o">#&lt;/span>&lt;span class="nv">uuid&lt;/span> &lt;span class="s">&amp;#34;c991a43c-214e-4d77-b1b1-06cbe1bb51e9&amp;#34;&lt;/span> &lt;span class="c1">;; the particular line&lt;/span>
&lt;span class="o">#&lt;/span>&lt;span class="nv">uuid&lt;/span> &lt;span class="s">&amp;#34;75f65ec9-1441-4ac6-a909-eceb30f9cce1&amp;#34;&lt;/span> &lt;span class="c1">;; the import job&lt;/span>
&lt;span class="p">]&lt;/span>
&lt;span class="ss">::id/causations&lt;/span>
&lt;span class="p">[&lt;/span>&lt;span class="o">#&lt;/span>&lt;span class="nv">uuid&lt;/span> &lt;span class="s">&amp;#34;67bdf0d6-4d5e-4c0d-a840-8732e94a78a8&amp;#34;&lt;/span> &lt;span class="c1">;; the IDs of current positions&lt;/span>
&lt;span class="o">#&lt;/span>&lt;span class="nv">uuid&lt;/span> &lt;span class="s">&amp;#34;bab99163-54e4-4350-9356-b7bd18ed9ed2&amp;#34;&lt;/span>
&lt;span class="o">#&lt;/span>&lt;span class="nv">uuid&lt;/span> &lt;span class="s">&amp;#34;2fe68d11-9434-470b-8caa-64b07ecb9d26&amp;#34;&lt;/span>
&lt;span class="o">#&lt;/span>&lt;span class="nv">uuid&lt;/span> &lt;span class="s">&amp;#34;b97bf998-dab6-45bb-8dde-163c947ad0d5&amp;#34;&lt;/span>&lt;span class="p">]}&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>
This necessarily complicates the process of finding immediate and ultimate causes of effects so is only recommended for situations where one is certain it will help.&lt;/p>
&lt;div class="footnotes">
&lt;hr class="footnotes-separatator">
&lt;div class="footnote-definitions">
&lt;div class="footnote-definition">
&lt;sup id="footnote-1">&lt;a href="#footnote-reference-1">1&lt;/a>&lt;/sup>
&lt;div class="footnote-body">
&lt;p>An entity ID might also be called a &lt;em>message ID&lt;/em>.&lt;/p>
&lt;/div>
&lt;/div>
&lt;div class="footnote-definition">
&lt;sup id="footnote-2">&lt;a href="#footnote-reference-2">2&lt;/a>&lt;/sup>
&lt;div class="footnote-body">
&lt;p>A UUID is a universally unique identifier, meaning that it can be generated without fear that it might conflict with any already extant identifier. To use them in Clojure, I use the &lt;a href="https://github.com/danlentz/clj-uuid">&lt;code>clj-uuid&lt;/code>&lt;/a> library.&lt;/p>
&lt;div class="src src-clojure">
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-clojure" data-lang="clojure">&lt;span class="p">(&lt;/span>&lt;span class="nf">require&lt;/span> &lt;span class="o">&amp;#39;&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="nv">clj-uuid&lt;/span> &lt;span class="ss">:as&lt;/span> &lt;span class="nv">uuid&lt;/span>&lt;span class="p">])&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="nf">uuid/v4&lt;/span>&lt;span class="p">)&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div></description></item><item><title>Event Sourcing</title><link>http://blog.almost.education/posts/event-sourcing/</link><pubDate>Wed, 17 Nov 2021 00:00:00 +0000</pubDate><guid>http://blog.almost.education/posts/event-sourcing/</guid><description>
&lt;p>
&lt;em>This article is in the process of being written.&lt;/em>&lt;/p>
&lt;div id="outline-container-headline-1" class="outline-2">
&lt;h2 id="headline-1">
Introduction
&lt;/h2>
&lt;div id="outline-text-headline-1" class="outline-text-2">
&lt;p>
State isn&amp;#39;t stored. We rebuild it every time we need to query or do something to it. It has its drawbacks, but it does allow us to do things that would be impossible otherwise. We can view out system&amp;#39;s history with new perspectives, or add in missed past events. Our view of the past is necessarily wrong for any complex system and yet we design systems that lack any way to account for that.&lt;/p>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-2" class="outline-2">
&lt;h2 id="headline-2">
My projects
&lt;/h2>
&lt;div id="outline-text-headline-2" class="outline-text-2">
&lt;p>
I&amp;#39;ve worked a fair bit with event sourcing:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="http://blog.almost.education/posts/rashomon/">Rashomon&lt;/a> (&lt;a href="https://github.com/EducatedAlmost/rashomon">GitHub&lt;/a>)&lt;/li>
&lt;li>&lt;a href="http://blog.almost.education/posts/demesne/">Demesne&lt;/a> (&lt;a href="https://github.com/EducatedAlmost/demesne">GitHub&lt;/a>)&lt;/li>
&lt;li>Eventstore.clj (&lt;a href="https://github.com/EducatedAlmost/eventstore.clj">GitHub&lt;/a>)&lt;/li>
&lt;/ul>
&lt;p>&lt;a href="http://blog.almost.education/tags/event-sourcing/">All articles with the &lt;em>&amp;#39;event sourcing&amp;#39;&lt;/em> tag&lt;/a>&lt;/p>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-3" class="outline-2">
&lt;h2 id="headline-3">
History
&lt;/h2>
&lt;div id="outline-text-headline-3" class="outline-text-2">
&lt;p>
Greg Young
Event Store DB&lt;/p>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-4" class="outline-2">
&lt;h2 id="headline-4">
An event store
&lt;/h2>
&lt;/div>
&lt;div id="outline-container-headline-5" class="outline-2">
&lt;h2 id="headline-5">
Rebuilding from known states
&lt;/h2>
&lt;/div>
&lt;div id="outline-container-headline-6" class="outline-2">
&lt;h2 id="headline-6">
Reverting
&lt;/h2>
&lt;/div>
&lt;div id="outline-container-headline-7" class="outline-2">
&lt;h2 id="headline-7">
Diagnosing
&lt;/h2>
&lt;/div>
&lt;div id="outline-container-headline-8" class="outline-2">
&lt;h2 id="headline-8">
Reinterpreting
&lt;/h2>
&lt;div id="outline-text-headline-8" class="outline-text-2">
&lt;p>
Could be useful for A/B testing
Loading from a configuration service
Accepting configuration from a user (SAAS)&lt;/p>
&lt;p>
Useful when?
The state of an aggregate is tied up with its history&lt;/p>
&lt;p>
Example&lt;/p>
&lt;p>
Deactivating accounts after a period of inactivity, client requests changes to the account. Developers have to make the change, try and track down the accounts that were affected. How do you do that? Do you really have those logs? Can you use them to change your DB? Will you not accidentally reactivate someone who really shouldn&amp;#39;t be? In the meantime, you have clients who&amp;#39;ve tried to perform actions on their account but were rejected because their account was deactivated. Your operations team are spending their time finding the details of the failed actions to retry it. Why not just reinterpret the attempt in the new context of an active account?&lt;/p>
&lt;p>
Can I come up with a more human-centred analogy?&lt;/p>
&lt;p>
Events mean different things in different contexts.&lt;/p>
&lt;p>
What&amp;#39;s the difference between an event and a command? Commands can be rejected? Is this actually the distinction?&lt;/p>
&lt;p>
Where is event sourcing inappropriate? Simple domains. Where rebuilding the domain is prohibitively expensive. When the team don&amp;#39;t understand it.&lt;/p>
&lt;div class="src src-text">
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">account.created
account.deactivated.inactivity
user.payment.requested
user.payment.declined
account.address.requested&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>
We can change our perspectives to ignore deactivations that happen for bad reasons. In the new light where we ignore &lt;code>account.deactivated.inactivity&lt;/code> if it lists too short an inactivity period, the user is now active in the context of subsequent events. We would not want to reinterpret the payment requests however. Thankfully, these events, if stored in the user&amp;#39;s stream of events at all, are just links to events in the Payments aggregate or domain. Loading the Account aggregate, and it being active will not retrigger these payments, thankfully.&lt;/p>
&lt;p>
Whilst old context, address didn&amp;#39;t change&lt;/p>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-9" class="outline-2">
&lt;h2 id="headline-9">
Drawbacks and difficulties
&lt;/h2>
&lt;/div>
&lt;div id="outline-container-headline-10" class="outline-2">
&lt;h2 id="headline-10">
Related patterns
&lt;/h2>
&lt;div id="outline-text-headline-10" class="outline-text-2">
&lt;p>
&lt;a href=" http://blog.almost.education/posts/corr-caus-ids/ ">Correlation and causation IDs&lt;/a>&lt;/p>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-11" class="outline-2">
&lt;h2 id="headline-11">
Software
&lt;/h2>
&lt;div id="outline-text-headline-11" class="outline-text-2">
&lt;p>
Event Store DB&lt;/p>
&lt;p>
Kafka&lt;/p>
&lt;/div>
&lt;/div></description></item><item><title>æ/Demesne</title><link>http://blog.almost.education/posts/demesne/</link><pubDate>Wed, 17 Nov 2021 00:00:00 +0000</pubDate><guid>http://blog.almost.education/posts/demesne/</guid><description>
&lt;p>
&lt;em>An example of domain-driven design, CQRS, and event sourcing, in Clojure.&lt;/em>&lt;/p>
&lt;p>
https://github.com/EducatedAlmost/demesne&lt;/p>
&lt;p>
See also my post on &lt;a href="http://blog.almost.education/posts/event-sourcing/">event sourcing&lt;/a>.&lt;/p>
&lt;p>
There&amp;#39;s a maxim&lt;sup class="footnote-reference">&lt;a id="footnote-reference-1" href="#footnote-1">1&lt;/a>&lt;/sup> within physics that something is not understood until it can be taught — I think a similar similar maxim holds in software development; one doesn&amp;#39;t understand a pattern until one can implement it.&lt;/p>
&lt;div id="outline-container-headline-1" class="outline-2">
&lt;h2 id="headline-1">
Demesne
&lt;/h2>
&lt;div id="outline-text-headline-1" class="outline-text-2">
&lt;p>
Under feudalism, a &lt;a href="https://en.wikipedia.org/wiki/Demesne">&lt;em>demesne&lt;/em>&lt;/a> &lt;code>/dɪˈmeɪn/&lt;/code> was all the land owned by the lord of the manor. The &lt;em>domain&lt;/em> of domain-driven design is the larger context in which the software is run. Demesne imagines a warehouse of named item lines; which can be searched for, have instances checked in and out, be deactivated and reactivated, and be renamed.&lt;/p>
&lt;p>
I&amp;#39;ll be talking about &lt;em>domain-driven design&lt;/em>, &lt;em>CQRS&lt;/em>, and &lt;em>event sourcing&lt;/em>. What do these mean?&lt;/p>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-2" class="outline-2">
&lt;h2 id="headline-2">
CQRS
&lt;/h2>
&lt;div id="outline-text-headline-2" class="outline-text-2">
&lt;p>
Command Query Responsibility Segregation divorces the model used for instructions to an application, commands, from that used in requests for information, queries. It derives from Command Query separation, the idea that commands should not act as queries, and queries should not change state, and contrasts clearly to a common pattern where to update the state of an entity, its state is provided.&lt;/p>
&lt;p>
There are some benefits from taking this approach. Commands can mimic real-world actions of the domain. Those calling aggregate behaviours are decoupled from the aggregate implementation. And this gives us flexibility in how we choose to store our state.&lt;/p>
&lt;p>
Demesne has yet to implement the query side of the application, but it will be a web UI that will display the state of its entities and allow actions to be taken. But crucially, when actions are taken this will send commands to the HTTP endpoint, not update the state directly.&lt;/p>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-3" class="outline-2">
&lt;h2 id="headline-3">
Event sourcing
&lt;/h2>
&lt;div id="outline-text-headline-3" class="outline-text-2">
&lt;p>
Event sourcing a datastructure is to not store its state, but an ordered collection of the events that have occurred to it either from a known former state or from its conception. It is useful in complex domains, especially those where will might be interested in an entity&amp;#39;s history, something that would be hidden in logs, obscure database fields, or simply lost in a standard application.&lt;/p>
&lt;p>
To rebuild an entity&amp;#39;s current state, we load the entity&amp;#39;s events, and progressively apply them culminating in the entity as it is. To see an example of this in Clojure, see my project &lt;a href="http://blog.almost.education/posts/rashomon/">Rashomon&lt;/a> (&lt;a href="https://github.com/EducatedAlmost/rashomon">GitHub&lt;/a>).&lt;/p>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-4" class="outline-2">
&lt;h2 id="headline-4">
Domain-driven design
&lt;/h2>
&lt;div id="outline-text-headline-4" class="outline-text-2">
&lt;p>
Domain-driven design puts the language and lexicon at the centre of the development process. It tells us that to effectively develop software within a domain, it is required of us to understand the domain and its processes, with a particular emphasis on the creation of an ubiquitous language, a shared language between developer and business person, user, domain expert.&lt;/p>
&lt;p>
This contrasts with a style of thinking which is common amongst developers. There is an idealism about creating things afresh, rather than working with what is there already. If we think that we can create a new and better lexicon, in isolated cases we might be right, but those who use this language every day will have a greater knowledge of it and the nuances it involves. Imagine the monstrosity that would be involved if we asked the marketing department to name our functions—why should we determine the language of the business side? The language within our programs has a habit of leaking out, APIs, requests of users, error messages — why should this conflict with the language they already know?&lt;/p>
&lt;p>
&lt;a href="https://en.wikipedia.org/wiki/Conway%27s_law">Conway&amp;#39;s law&lt;/a> states that a team which designs a system will create one that matches the structure of the team. In the case of development, it means that the code mimics the development team. Let us be aware of this and consciously work to create a system that mimics the domain instead.&lt;/p>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-5" class="outline-2">
&lt;h2 id="headline-5">
But do I know enough to implement it?
&lt;/h2>
&lt;div id="outline-text-headline-5" class="outline-text-2">
&lt;p>
For two years I worked on a team that used CQRS, ES, and DDD. And yet my team lead wrote a library with abstracted many of the details and whilst I worked on every part of the system I have as yet never before created it from scratch. This project is a challenge to myself to prove that I know what I think I know, and it has been successful one.&lt;/p>
&lt;/div>
&lt;/div>
&lt;div class="footnotes">
&lt;hr class="footnotes-separatator">
&lt;div class="footnote-definitions">
&lt;div class="footnote-definition">
&lt;sup id="footnote-1">&lt;a href="#footnote-reference-1">1&lt;/a>&lt;/sup>
&lt;div class="footnote-body">
&lt;p>The idea originates with &lt;a href="https://en.wikipedia.org/wiki/Ernest_Rutherford">Ernest Rutherford&lt;/a> who is &lt;a href="https://quoteinvestigator.com/2019/10/19/barmaid/">often quoted&lt;/a> as saying that a scientific discovery has no merit until it can be explained to a barmaid.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div></description></item><item><title>æ/read-time.el</title><link>http://blog.almost.education/posts/read-time-el/</link><pubDate>Tue, 16 Nov 2021 00:00:00 +0000</pubDate><guid>http://blog.almost.education/posts/read-time-el/</guid><description>&lt;p>
&lt;em>An Emacs function that tells you how long it takes to read things.&lt;/em>&lt;/p>
&lt;p>
&lt;a href="https://github.com/EducatedAlmost/read-time.el">https://github.com/EducatedAlmost/read-time.el&lt;/a>&lt;/p>
&lt;p>
For a short while I was recording educational videos and audiobooks from scripts written in Emacs. A key piece of information I needed but didn&amp;#39;t have access to was the time it would take to read these when recording. Emacs does provide the useful &lt;code>count-words&lt;/code> function, but there was no &lt;code>read-time&lt;/code>.&lt;/p>
&lt;p>
Reading speeds average around 5 words per second, dropping to 3 for careful speech, and rising above ten for speed readers. For small word counts one may easily divide the word count by ones speed to find the reading time, but it is not easy for larger word counts.&lt;/p>
&lt;p>
&lt;code>read-time&lt;/code> does it for you. Called interactively, it returns the time to read the whole buffer or the region.&lt;/p>
&lt;div class="src src-lisp">
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-lisp" data-lang="lisp">&lt;span class="p">(&lt;/span>&lt;span class="nv">read-time&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nv">point&lt;/span> &lt;span class="nf">min&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nv">point&lt;/span> &lt;span class="nf">max&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="c1">;; =&amp;gt; 14 seconds&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>
And one may specify a reading speed by setting &lt;code>read-time-words-per-sec&lt;/code>, or by providing a third argument.&lt;/p>
&lt;div class="src src-lisp">
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-lisp" data-lang="lisp">&lt;span class="p">(&lt;/span>&lt;span class="nv">read-time&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nv">point&lt;/span> &lt;span class="nf">min&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nv">point&lt;/span> &lt;span class="nf">max&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="c1">;; =&amp;gt; 24 minutes 10 seconds&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>
I hope you find the package useful!&lt;/p></description></item><item><title>Serialising with Java generics</title><link>http://blog.almost.education/posts/serialising-java-generics/</link><pubDate>Wed, 27 Oct 2021 00:00:00 +0000</pubDate><guid>http://blog.almost.education/posts/serialising-java-generics/</guid><description>
&lt;p>
I think it&amp;#39;s fair to say that developers are divided on the issue of strong type systems. A &lt;a href="https://www.tiobe.com/tiobe-index/">list&lt;/a> of the most popular programming languages contains a balance of those with (Java, C++) and without it (Python, Javascript). After two years of working almost exclusively with dynamic typing, I am occasionally tempted back to the dark side and for some time I have some fun until I stumble upon one of the edge cases where type systems get messy.&lt;/p>
&lt;div id="outline-container-headline-1" class="outline-2">
&lt;h2 id="headline-1">
Naïveté
&lt;/h2>
&lt;div id="outline-text-headline-1" class="outline-text-2">
&lt;p>
I needed to create a repository that could persist objects in JSON form. A repository has two public methods, &lt;code>get&lt;/code> and &lt;code>save&lt;/code>. Imagine, we only wanted to be able to store &lt;code>ints&lt;/code> in our repository, and reference them with a &lt;code>String&lt;/code> key:&lt;/p>
&lt;div class="src src-java">
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">public&lt;/span> &lt;span class="kd">interface&lt;/span> &lt;span class="nc">Repository&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kt">void&lt;/span> &lt;span class="nf">save&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="nf">get&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">IntRepository&lt;/span> &lt;span class="kd">implements&lt;/span> &lt;span class="n">Repository&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kt">void&lt;/span> &lt;span class="nf">save&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="nf">get&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">3&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>
Obviously, this class isn&amp;#39;t doing a useful job — it&amp;#39;s left to the reader to actually save these values and then retrieve them. What&amp;#39;s interesting is how we can make this Repository generic. If we wanted a Repository that could store &lt;code>bytes&lt;/code>, or &lt;code>Strings&lt;/code>, or any other type, we would need to create a new class for each. However, using Java&amp;#39;s generics, we can create one class that&amp;#39;s able to act as a &lt;code>Repository&lt;/code> for all objects, while a single instance of the repository will store only a single type, and guarantee a strong type when retrieving things from the repository.&lt;/p>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-2" class="outline-2">
&lt;h2 id="headline-2">
Generics
&lt;/h2>
&lt;div id="outline-text-headline-2" class="outline-text-2">
&lt;div class="src src-java">
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">public&lt;/span> &lt;span class="kd">interface&lt;/span> &lt;span class="nc">Repository&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kt">void&lt;/span> &lt;span class="nf">save&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">T&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="c1">// T get (String key);
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="o">}&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">RepositoryImpl&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="kd">implements&lt;/span> &lt;span class="n">Repository&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">save&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">T&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="c1">// public T get (String key) {
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// return;
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// }
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="o">}&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>
I&amp;#39;ve commented out our get method as this won&amp;#39;t currently compile. We need to find a way to return something of type &lt;code>T&lt;/code>. It turns out that we can just cast.&lt;/p>
&lt;div class="src src-java">
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">public&lt;/span> &lt;span class="n">T&lt;/span> &lt;span class="nf">get&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="s">&amp;#34;Hello, world&amp;#34;&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>
But this fails if &lt;code>T&lt;/code> is something that our result cannot be casted to. In my case, I was storing my objects in JSON form in a Postgres database. Using Jackson&amp;#39;s object mapper, any Java object can be converted into JSON.&lt;/p>
&lt;div class="src src-java">
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">RepositoryImpl&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>
&lt;span class="kd">implements&lt;/span> &lt;span class="n">Repository&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="n">ObjectMapper&lt;/span> &lt;span class="n">mapper&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="nf">RepositoryImpl&lt;/span> &lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">mapper&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">ObjectMapper&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">save&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">T&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">String&lt;/span> &lt;span class="n">jsonAsString&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">mapper&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">writeValueAsString&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">value&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="c1">// persist the String
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">T&lt;/span> &lt;span class="nf">get&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="c1">// retreive the string
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">jsonAsString&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="n">mapper&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">readValue&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">jsonAsString&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">T&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>
This looks like it&amp;#39;s going to be perfect… until you compile.&lt;/p>
&lt;div class="src src-sh">
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">cannot &lt;span class="k">select&lt;/span> from a &lt;span class="nb">type&lt;/span> variable&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>
It seems that &lt;code>T.class&lt;/code> is a problem. It looks ugly but for the time being we can pass the &lt;code>Class&lt;/code> into the object within the constructor. I&amp;#39;ve added exception handling but this is not necessarily how you would like to do it. You probably want the methods to throw exceptions, but because the exception throw declarations would need to be added to the interface&amp;#39;s methods, it&amp;#39;s might be best to define a custom exception type, like &lt;code>RepositorySavingException&lt;/code>, so that the interface doesn&amp;#39;t contain a reference to the implementation&amp;#39;s &lt;code>JsonProcessingException&lt;/code>. This leaves the interface free of any details of the implementation so that it is reusable for any other implementation that wants to use it.&lt;/p>
&lt;div class="src src-java">
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kn">import&lt;/span> &lt;span class="nn">com.fasterxml.jackson.databind.ObjectMapper&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">com.fasterxml.jackson.core.JsonProcessingException&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kn">import&lt;/span> &lt;span class="nn">java.io.IOException&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">RepositoryImpl&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="kd">implements&lt;/span> &lt;span class="n">Repository&lt;/span> &lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="n">ObjectMapper&lt;/span> &lt;span class="n">mapper&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="n">Class&lt;/span> &lt;span class="n">clazz&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="nf">RepositoryImpl&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">Class&lt;/span> &lt;span class="n">clazz&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">clazz&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">clazz&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">mapper&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">ObjectMapper&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">save&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">T&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">try&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="n">String&lt;/span> &lt;span class="n">jsonAsString&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">mapper&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">writeValueAsString&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">value&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="c1">// persist the String
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="o">}&lt;/span> &lt;span class="k">catch&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">JsonProcessingException&lt;/span> &lt;span class="n">jpe&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{}&lt;/span>
&lt;span class="k">return&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">T&lt;/span> &lt;span class="nf">get&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="c1">// retreive the string
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">jsonAsString&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;&amp;#34;&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="k">try&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="n">mapper&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">readValue&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">jsonAsString&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">clazz&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span> &lt;span class="k">catch&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">IOException&lt;/span> &lt;span class="n">ioe&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>
This is looking pretty good, but will only let us specify the class. What if we want a repository of &lt;code>List&amp;lt;String&amp;gt;&lt;/code>? The repo will store &lt;code>Lists&lt;/code>, and return &lt;code>Lists&lt;/code>, with no guarantee that those &lt;code>Lists&lt;/code> contain &lt;code>Strings&lt;/code>. Thankfully, &lt;code>TypeReferences&lt;/code> give us a deeper understanding than &lt;code>Classes&lt;/code>. Casting to &lt;code>T&lt;/code> is now superfluous.&lt;/p>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-3" class="outline-2">
&lt;h2 id="headline-3">
&lt;code>TypeReference&lt;/code>
&lt;/h2>
&lt;div id="outline-text-headline-3" class="outline-text-2">
&lt;div class="src src-java">
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kn">import&lt;/span> &lt;span class="nn">com.fasterxml.jackson.core.type.TypeReference&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="n">ObjectMapper&lt;/span> &lt;span class="n">mapper&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kd">private&lt;/span> &lt;span class="n">TypeReference&lt;/span> &lt;span class="n">type&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="nf">RepositoryImpl&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">TypeReference&lt;/span> &lt;span class="n">type&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">type&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">TypeReference&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;(){};&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">mapper&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">ObjectMapper&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="kd">public&lt;/span> &lt;span class="n">T&lt;/span> &lt;span class="nf">get&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="c1">// retreive the string
&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">jsonAsString&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;&amp;#34;&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="k">try&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">mapper&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">readValue&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">jsonAsString&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">type&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="o">}&lt;/span> &lt;span class="k">catch&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">IOException&lt;/span> &lt;span class="n">ioe&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="o">}&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>
And this is how we can use it.&lt;/p>
&lt;div class="src src-java">
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="n">TypeReference&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">type&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">TypeReference&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">&amp;gt;(){};&lt;/span>
&lt;span class="n">Repository&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">repo&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">RepositoryImpl&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">&amp;gt;(&lt;/span>&lt;span class="n">type&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">repo&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">save&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;3&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;three&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">String&lt;/span> &lt;span class="n">str&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">repo&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">get&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;3&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>
It&amp;#39;s not nice that we have to specify the type twice. We can remove this by generating the &lt;code>TypeReference&lt;/code> inside the constructor.&lt;/p>
&lt;div class="src src-java">
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="kd">public&lt;/span> &lt;span class="nf">RepositoryImpl&lt;/span> &lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">type&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">TypeReference&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;(){};&lt;/span>
&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">mapper&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">ObjectMapper&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="o">}&lt;/span>
&lt;span class="n">Repository&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">repo&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">RepositoryImpl&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">&amp;gt;();&lt;/span>
&lt;span class="n">repo&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">save&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;3&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;three&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="n">String&lt;/span> &lt;span class="n">str&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">repo&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">get&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;3&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-4" class="outline-2">
&lt;h2 id="headline-4">
An exercise for the reader
&lt;/h2>
&lt;div id="outline-text-headline-4" class="outline-text-2">
&lt;p>
In this article, I have shown how to genericise the objects that are stored within the repository, but we are still bound to using &lt;code class="verbatim">Strings&lt;/code> as our keys. Try introducing a second generic variable to act as the key of our &lt;code class="verbatim">Repository&lt;/code>.&lt;/p>
&lt;/div>
&lt;/div></description></item><item><title>æ/bang.el</title><link>http://blog.almost.education/posts/bang-el/</link><pubDate>Wed, 20 Oct 2021 00:00:00 +0000</pubDate><guid>http://blog.almost.education/posts/bang-el/</guid><description>
&lt;p>
&lt;em>Use DuckDuckGo&amp;#39;s !Bangs from the comfort of Emacs!&lt;/em>&lt;/p>
&lt;p>
&lt;a href="https://github.com/EducatedAlmost/bang.el">https://github.com/EducatedAlmost/bang.el&lt;/a>&lt;/p>
&lt;p>
I use &lt;a href="https://duckduckgo.com/">DuckDuckGo&lt;/a>. Its become popular for its emphasis on user privacy in contrast to the giant of the market, Google, who it seems every six months is implicated in &lt;a href="https://news.ycombinator.com/item?id=28976487">unethical behaviour&lt;/a>. But honestly, I use DuckDuckGo because it looks nicer. Search for something in Google &lt;a href="https://duckduckgo.com/?q=!g foo">&lt;code>(bang &amp;#34;g&amp;#34; &amp;#34;foo&amp;#34;)&lt;/code>&lt;/a> and as well as the expected search results, one is shown &amp;#39;people also ask&amp;#39;, top news stories, video thumbnails from the Foo Fighters YouTube channel, and a summary of their latest tweets. When one expects a uniform list of simple search results, one is instead shown a noisy list of varying components.&lt;/p>
&lt;div id="outline-container-headline-1" class="outline-2">
&lt;h2 id="headline-1">
&lt;em>Bang&lt;/em>
&lt;/h2>
&lt;div id="outline-text-headline-1" class="outline-text-2">
&lt;p>
And yet I&amp;#39;ve ended up using DDG for something almost unrelated, &lt;em>Bang&lt;/em>. If you search DDG for &lt;code>!x foo&lt;/code>, it delegates that search to the website represented by the Bang prefix &lt;code>x&lt;/code> and searches it for &lt;code>foo&lt;/code>. For example, you might want to search for the &lt;code>bang.el&lt;/code> GitHub page, &lt;a href="https://duckduckgo.com/?q=!gh bang.el">&lt;code>!gh bang.el&lt;/code>&lt;/a>, or Wikipedia for Emacs, &lt;a href="https://duckduckgo.com/?q=!w Emacs">&lt;code>!w Emacs&lt;/code>&lt;/a>, see &lt;a href="https://duckduckgo.com/bang">here&lt;/a> for a list of prefixes. Instead of going to the website&amp;#39;s homepage, and then searching, Bang takes you straight to the results page. Called without a term, the Bang will usually take you to the homepage. Without a prefix, it takes you to DGG&amp;#39;s first result. If DDG is your browser&amp;#39;s default search engine this becomes really fast.&lt;/p>
&lt;p>
By my estimates, Bang shaves 10–30 seconds off every search, something that I do 10–100 times every day. By the reasoning of this classic xkcd comic, this is exactly the sort of task we should be making more efficient.&lt;/p>
&lt;p>
&lt;img src="https://imgs.xkcd.com/comics/is_it_worth_the_time_2x.png" alt="https://imgs.xkcd.com/comics/is_it_worth_the_time_2x.png" title="https://imgs.xkcd.com/comics/is_it_worth_the_time_2x.png" />&lt;/p>
&lt;p>
Over five years, 15 seconds saved 30 times every day nets us a total of &lt;strong>10 days&lt;/strong>! &lt;a href="https://duckduckgo.com/?q=!wa 15 seconds * 30 * 365 * 5">&lt;code>(bang &amp;#34;wa&amp;#34; &amp;#34;15 seconds * 30 * 365 * 5&amp;#34;)&lt;/code>&lt;/a>&lt;/p>
&lt;p>
Another key to greater productivity is cutting out what might disrupt ones flow. If I see the Wikipedia homepage, there&amp;#39;s a 50% chance that three hours later I&amp;#39;ll have 30 tabs open, and my previous work will be long forgotten. Bang takes me straight to the page I want, after which I can just close the browser.&lt;/p>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-2" class="outline-2">
&lt;h2 id="headline-2">
Examples
&lt;/h2>
&lt;div id="outline-text-headline-2" class="outline-text-2">
&lt;dl>
&lt;dt>
&lt;code>!gh&lt;/code>
&lt;/dt>
&lt;dd>GitHub repositories&lt;/dd>
&lt;dt>
&lt;code>!clj&lt;/code>
&lt;/dt>
&lt;dd>ClojureDocs&lt;/dd>
&lt;dt>
&lt;code>!xiny&lt;/code>
&lt;/dt>
&lt;dd>Learn X in Y minutes, a introduction to any programming language&lt;/dd>
&lt;dt>
&lt;code>!pm&lt;/code>
&lt;/dt>
&lt;dd>PubMed, biomedical papers&lt;/dd>
&lt;dt>
&lt;code>!arx&lt;/code>
&lt;/dt>
&lt;dd>arXiv, physics papers&lt;/dd>
&lt;dt>
&lt;code>!wa&lt;/code>
&lt;/dt>
&lt;dd>WolframAlpha, computational knowledge engine&lt;/dd>
&lt;dt>
&lt;code>!ma&lt;/code>
&lt;/dt>
&lt;dd>MemoryAlpha, the Star Trek Wiki&lt;/dd>
&lt;dt>
&lt;code>!awoiaf&lt;/code>
&lt;/dt>
&lt;dd>A Wiki of Ice and Fire&lt;/dd>
&lt;/dl>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-3" class="outline-2">
&lt;h2 id="headline-3">
What is missing from Bang?
&lt;/h2>
&lt;div id="outline-text-headline-3" class="outline-text-2">
&lt;p>
There are four types of Bangs that are disallowed:&lt;/p>
&lt;ul>
&lt;li>those for &lt;strong>illegal&lt;/strong> websites&lt;/li>
&lt;li>those for websites with &lt;strong>explicit content&lt;/strong>&lt;/li>
&lt;li>those that would be &lt;strong>overly niche&lt;/strong>&lt;/li>
&lt;li>those that would violate the website&amp;#39;s &lt;strong>terms of service&lt;/strong>&lt;/li>
&lt;/ul>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-4" class="outline-2">
&lt;h2 id="headline-4">
&lt;code>bang.el&lt;/code>
&lt;/h2>
&lt;div id="outline-text-headline-4" class="outline-text-2">
&lt;p>
&lt;code>bang.el&lt;/code> takes this a step further. Not only does one get to skip the process of going to the website, now one can use the Bang from Emacs itself.&lt;/p>
&lt;div id="outline-container-headline-5" class="outline-3">
&lt;h3 id="headline-5">
&lt;code>browse-url&lt;/code>
&lt;/h3>
&lt;div id="outline-text-headline-5" class="outline-text-3">
&lt;p>
All &lt;code>bang.el&lt;/code> functions ultimately call &lt;code>browse-url&lt;/code>. To choose which program is used by Emacs to open the link, one can edit the values of &lt;code>browse-url-browser-function&lt;/code> and &lt;code>browse-url-generic-function&lt;/code> as documented &lt;a href="https://www.emacswiki.org/emacs/BrowseUrl">here&lt;/a>.&lt;/p>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-6" class="outline-3">
&lt;h3 id="headline-6">
&lt;code>bang&lt;/code>
&lt;/h3>
&lt;div id="outline-text-headline-6" class="outline-text-3">
&lt;p>
The general purpose function, that accepts a prefix and the thing to be searched, and opens it with &lt;code>browse-url&lt;/code>.&lt;/p>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-7" class="outline-3">
&lt;h3 id="headline-7">
&lt;code>bang-info&lt;/code>
&lt;/h3>
&lt;div id="outline-text-headline-7" class="outline-text-3">
&lt;p>
This no-argument function takes the caller to the Bang homepage where one can learn more about it.&lt;/p>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-8" class="outline-3">
&lt;h3 id="headline-8">
&lt;code>bang-find-prefix&lt;/code>
&lt;/h3>
&lt;div id="outline-text-headline-8" class="outline-text-3">
&lt;p>
If one wishes to learn which prefix is needed for which website, this function can be called that uses Bang&amp;#39;s own search to find it.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-9" class="outline-2">
&lt;h2 id="headline-9">
&lt;code>bang.el&lt;/code> and Org-roam
&lt;/h2>
&lt;div id="outline-text-headline-9" class="outline-text-2">
&lt;p>
What is &lt;a href="https://www.orgroam.com/">Org-roam&lt;/a>?&lt;/p>
&lt;blockquote>
&lt;p>A plain-text knowledge management system.&lt;/p>
&lt;/blockquote>
&lt;p>
Inspired by &lt;a href="https://roamresearch.com/">Roam Research&lt;/a>, org-roam is &lt;em>the&lt;/em> best tool for creating a personal wiki, knowledge store, or &lt;a href="https://en.wikipedia.org/wiki/Zettelkasten">Zettelkasten&lt;/a>. I&amp;#39;ve accumulated &amp;gt;8500 nodes after a year of use &lt;a href="https://www.wolframalpha.com/input/?i=8500%2F365">&lt;code>!wa 8500/365&lt;/code>&lt;/a> so I can attest to its brilliance. I originally started writing &lt;code>bang.el&lt;/code> to quickly view the Wikipedia page of the subject I was writing about. For this reason, the initial name of the project was &lt;code>roam-to-wiki.el&lt;/code> and the first function became &lt;code>bang-roam-wiki.el&lt;/code>, which searches the current org-roam node in Wikipedia.&lt;/p>
&lt;p>
I find this to often be the case. A small simple function … we grow scope. Introduce variable where there was none previously.
&lt;code>roam-to-wiki.el&lt;/code> became &lt;code>bang-roam.el&lt;/code> and then, simply, &lt;code>bang.el&lt;/code>. The &lt;code>bang-roam&lt;/code> and &lt;code>bang-roam-wiki&lt;/code> functions still exist, so you can easily search for a node&amp;#39;s title, either in Wikipedia, or anywhere else.&lt;/p>
&lt;div id="outline-container-headline-10" class="outline-3">
&lt;h3 id="headline-10">
&lt;code>bang-roam&lt;/code>
&lt;/h3>
&lt;div id="outline-text-headline-10" class="outline-text-3">
&lt;p>
Calls &lt;code>bang&lt;/code> with the caller&amp;#39;s choice of prefix and the current org-roam node&amp;#39;s title.&lt;/p>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-11" class="outline-3">
&lt;h3 id="headline-11">
&lt;code>bang-roam-wiki&lt;/code>
&lt;/h3>
&lt;div id="outline-text-headline-11" class="outline-text-3">
&lt;p>
Calls &lt;code>bang&lt;/code> with the &lt;code>&amp;#34;w&amp;#34;&lt;/code> prefix and the current org-roam node&amp;#39;s title.&lt;/p>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-12" class="outline-2">
&lt;h2 id="headline-12">
Ideas
&lt;/h2>
&lt;div id="outline-text-headline-12" class="outline-text-2">
&lt;p>
I have wondered if &lt;code>bang&lt;/code> might be a good tool for improving the experience of searching for documentation whilst programming. I commonly find myself highlighting a symbol and calling &lt;code>(bang &amp;#34;clj&amp;#34; ...)&lt;/code> to find its definition in in ClojureDocs. Perhaps a function called &lt;code>bang-docs&lt;/code> which determined its prefix from whichever major mode was currently active, and the term defaulting to the symbol at point, would provide, regardless of the language used, an harmonious solution to documentation searching.&lt;/p>
&lt;p>
There are tools like &lt;a href="https://github.com/zealdocs/zeal">Zeal&lt;/a> and &lt;a href="https://kapeli.com/dash">Dash&lt;/a>, but I have found them to be a pain as documentation is kept in an external application. &lt;a href="https://github.com/dash-docs-el/helm-dash">Helm Dash&lt;/a> might be a good alternative as it supposedly runs everything from inside Emacs, but I have yet to try it out.&lt;/p>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-13" class="outline-2">
&lt;h2 id="headline-13">
The code
&lt;/h2>
&lt;div id="outline-text-headline-13" class="outline-text-2">
&lt;div class="src src-lisp">
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-lisp" data-lang="lisp">&lt;span class="p">(&lt;/span>&lt;span class="nf">require&lt;/span> &lt;span class="ss">&amp;#39;org-roam&lt;/span>&lt;span class="p">)&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>
Until I can work out how to make &lt;code>org-roam&lt;/code> optional, it is required due to the &lt;code>bang-roam&lt;/code> functions.&lt;/p>
&lt;div class="src src-lisp">
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-lisp" data-lang="lisp">&lt;span class="p">(&lt;/span>&lt;span class="nb">defun&lt;/span> &lt;span class="nv">bang-make-link&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nv">prefix&lt;/span> &lt;span class="nv">term&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="s">&amp;#34;Make the link that is used to search with Bangs, &amp;#39;!PREFIX TERM&amp;#39;.&amp;#34;&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="nv">concat&lt;/span> &lt;span class="s">&amp;#34;https://duckduckgo.com/?q=!&amp;#34;&lt;/span> &lt;span class="nv">prefix&lt;/span> &lt;span class="s">&amp;#34;+&amp;#34;&lt;/span> &lt;span class="nv">term&lt;/span>&lt;span class="p">))&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="nb">defun&lt;/span> &lt;span class="nv">bang&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nv">prefix&lt;/span> &lt;span class="nv">term&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="s">&amp;#34;Using Bang, search for TERM in website with corresponding PREFIX.&amp;#34;&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="nv">interactive&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="nc">list&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nv">read-string&lt;/span> &lt;span class="s">&amp;#34;Enter the Bang prefix: &amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="nv">read-string&lt;/span> &lt;span class="s">&amp;#34;Enter the term you wish to search: &amp;#34;&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="nb">when&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nv">use-region-p&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="nv">buffer-substring&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nv">region-beginning&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nv">region-end&lt;/span>&lt;span class="p">))))))&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="nv">browse-url&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nv">bang-make-link&lt;/span> &lt;span class="nv">prefix&lt;/span> &lt;span class="nv">term&lt;/span>&lt;span class="p">)))&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>
&lt;code>bang&lt;/code> is the central function of the package. If there is an active region, it is used as the default &lt;code>TERM&lt;/code> argument. See the section on &lt;a href="*Using the region as a default argument">default arguments&lt;/a> for an explanation of how this works, and &lt;a href="http://www.ergoemacs.org/emacs/elisp_interactive_form.html">here&lt;/a> for more information on elisp&amp;#39;s interactive forms.&lt;/p>
&lt;p>
&lt;code>bang-make-link&lt;/code> demonstrates a good habit of extracting sections of code into pure functions.&lt;/p>
&lt;p>
&lt;code>bang-info&lt;/code> and &lt;code>bang-find-prefix&lt;/code> just call the functions &lt;code>(bang &amp;#34;bang&amp;#34; &amp;#34;&amp;#34;)&lt;/code> and &lt;code>(bang &amp;#34;bang&amp;#34; WEBSITE)&lt;/code>, to access Bang&amp;#39;s own information page.&lt;/p>
&lt;div class="src src-lisp">
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-lisp" data-lang="lisp">&lt;span class="p">(&lt;/span>&lt;span class="nb">defun&lt;/span> &lt;span class="nv">bang-roam&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nv">prefix&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="s">&amp;#34;Use the node&amp;#39;s title to search using the Bang PREFIX.&amp;#34;&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="nv">interactive&lt;/span> &lt;span class="s">&amp;#34;sEnter the bang prefix: &amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="nv">condition-case&lt;/span> &lt;span class="no">nil&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="nv">bang&lt;/span> &lt;span class="nv">prefix&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="nv">org-roam-node-title&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="nv">org-roam-node-at-point&lt;/span>&lt;span class="p">)))&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="kt">error&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nv">message&lt;/span> &lt;span class="s">&amp;#34;Error: not inside an org-roam node.&amp;#34;&lt;/span>&lt;span class="p">))))&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>
&lt;code>condition-case&lt;/code> is elisp&amp;#39;s equivalent of a try-catch statement. It executes the bodyform, in this case a call to &lt;code>bang&lt;/code> with a prefix and the node&amp;#39;s title as its arguments, but in the case that one is not inside a org-roam node it throws an exception. After the bodyform, one can provide a number of handlers of the form &lt;code>(ERROR-TYPE body)&lt;/code> which are executed if the throw exception matches the &lt;code>ERROR-TYPE&lt;/code>. In &lt;code>bang-roam&lt;/code> it just informs the caller that the function cannot be called outside of a org-roam node.&lt;/p>
&lt;div class="src src-lisp">
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-lisp" data-lang="lisp">&lt;span class="p">(&lt;/span>&lt;span class="nf">provide&lt;/span> &lt;span class="ss">&amp;#39;bang&lt;/span>&lt;span class="p">)&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-14" class="outline-2">
&lt;h2 id="headline-14">
Using the region as a default argument
&lt;/h2>
&lt;div id="outline-text-headline-14" class="outline-text-2">
&lt;p>
Previously, the &lt;code>bang&lt;/code> function took no notice of whether a region was active or not.&lt;/p>
&lt;div class="src src-lisp">
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-lisp" data-lang="lisp">&lt;span class="p">(&lt;/span>&lt;span class="nb">defun&lt;/span> &lt;span class="nv">bang&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nv">prefix&lt;/span> &lt;span class="nv">term&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="s">&amp;#34;Using Bang, search for TERM in website with corresponding PREFIX.&amp;#34;&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="nv">interactive&lt;/span>
&lt;span class="s">&amp;#34;sEnter the Bang prefix:
&lt;/span>&lt;span class="s">sEnter the term you wish to search:&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="nv">browse-url&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nv">concat&lt;/span> &lt;span class="s">&amp;#34;https://duckduckgo.com/?q=!&amp;#34;&lt;/span> &lt;span class="nv">prefix&lt;/span> &lt;span class="s">&amp;#34; &amp;#34;&lt;/span> &lt;span class="nv">term&lt;/span>&lt;span class="p">)))&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>
This could be frustrating, as it might require one to carefully retype something that is already present in ones buffer. With thanks to Prof Hugo Nobrega, I&amp;#39;ve rewritten this function so that if there is an active region it will be displayed in the minibuffer when one is prompted for the &lt;code>term&lt;/code> argument, allowing one to either confirm it or enter something different.&lt;/p>
&lt;div class="src src-lisp">
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-lisp" data-lang="lisp">&lt;span class="p">(&lt;/span>&lt;span class="nv">interactive&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="nc">list&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nv">read-string&lt;/span> &lt;span class="s">&amp;#34;Enter the Bang prefix: &amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="nv">read-string&lt;/span> &lt;span class="s">&amp;#34;Enter the term you wish to search: &amp;#34;&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="nb">when&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nv">use-region-p&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="nv">buffer-substring&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nv">region-beginning&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="nv">region-end&lt;/span>&lt;span class="p">))))))&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;p>
This also demonstrates the comprehensive form of &lt;code>interactive&lt;/code> that allows one to form a generic list that is that passed as the arguments of the function. &lt;code>buffer-substring&lt;/code> copies text from the buffer between two marks, being &lt;code>region-beginning&lt;/code> and &lt;code>region-end&lt;/code>.&lt;/p>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-15" class="outline-2">
&lt;h2 id="headline-15">
Conclusions
&lt;/h2>
&lt;div id="outline-text-headline-15" class="outline-text-2">
&lt;p>
Emacs&amp;#39;s extensibility is fantastic — no other editor makes it so easy to write new functions, leveraging existing functions and those of all installed packages. One can just write a tiny elisp file, whereas something like Visual Studio Code requires one to create a new Node.js package. The development experience is also great, being able to define and evaluate in the running editor, the feedback cycle is almost instant. It is vanishingly rare for developers to write their own editor plugins or extensions and yet for Emacs users it is a right of passage from when one first writes ones own &lt;code>init.el&lt;/code>.&lt;/p>
&lt;p>
Elisp&amp;#39;s &lt;code>interactive&lt;/code> forms are adaptable, and let us create a nice UI / UX. I was quickly frustrated with the interactive short forms &lt;code>s&lt;/code> and &lt;code>r&lt;/code>, but glad to find out that the longer form where one must create the argument list is not unwieldy.&lt;/p>
&lt;p>
One should streamline those processes that one spends the most total time on. Some of these tasks are so small that they are basically invisible, but with the frequency with which we do them, they add up to a large total time. A similar approach can be taken to reducing distractions.&lt;/p>
&lt;p>
One function can snowball into a whole project, this can be good or bad. Will it lead to a piece of work that will be useful to yourself and others? Or will it never be finished, with nothing learnt? What&amp;#39;s the pay-off? I&amp;#39;ve seen mistakes made like this, particularly when one aims for too much abstraction or generalisation, like a layer to abstract over all databases whether they be SQL, document, or graph. But then the opposite is true for something like Git which grew out Linus Torvald&amp;#39;s need for a source control system when developing Linux.&lt;/p>
&lt;/div>
&lt;/div></description></item></channel></rss>